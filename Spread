//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2020, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+

#property copyright "Copyright 2022, MetaQuotes Ltd."
#property link      "https://www.mql5.com"
#property version   "1.00"
#include <Trade/Trade.mqh>


enum SimNao
  {
   Sim = 1,
   Nao = 0,
  };


//--- input parameters
input string Senha = "020220";//SENHA
input string linha0 = "-------TRAVAS DE ALTA COM PUTS-------";
input ENUM_TIMEFRAMES TimeFramePETR4 = PERIOD_M1;//Timeframe (menor) de PETR4 para verificação de tendência
input ENUM_TIMEFRAMES TimeFramePETR4_2 = PERIOD_M1;//Time frame (Maior) de PETR4 para verificação de tendência
input int TendenciaUltimosCandles = 4;//Últimos candles para comparar preço (tendência)
input int HoraInicio = 10;//Após que horas este robô pode negociar
input int MinutoInicio = 15;//Após quantos minutos da hora inicial esse robô pode negociar
input int HoraFinal = 16;//Até que horas este robo poderá negociar
input int MinutosFinal = 50;//Até que minuto após o horário final pode negociar
input double Lote = 200; //Lote de negociação das opções
input SimNao DobrarLote = Sim;//Aumentar volume da posição em caso de o mercado ir contra?
input int LimiteVol = 1;//Limite de aumento do volume da posição.
input double TotalDeTrades = 300; //Desligar robô após este total de negócios
input int Seg = 1;//Intervalo de loop do código (segundos)
input int QuantCandles = 8; //Quantidade de candles comparados nos ratios
input double PercentualSinal = 0; //Tolerância, percentual, acima do maior ratio para o sinal de negociação
input double Gain = 0.01; //Gain (Centavos)
input double StopLoss = 1.50; //Stop Loss (Centavos)
input int MaxTravasAbertas = 2;//Quantidade máxima de travas abertas em negociação
input double MenorPrecoAceito = 0.10;//Menor preço aceito
input string linha0001 = "-------MENSAGENS DE NOTIFICAÇÃO-------";
input string MsgAbertura = "Uma trava foi aberta";//Mensagem de notificação ao abrir nova trava
input string MsgDeFechamentoComGain = "Uma trava fechou com GAIN: ";//Mensagem de notificação de GAIN
input string MsgDeFechamentoComLoss = "Uma trava fechou com Loss: ";//Mensagem de notificação de LOSS


input string linha1 = "---------------TRAVA 1---------------";
input string Trava1_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava1_Ativo2 = "PETRP354";//Ativo de compra dessa trava

input string linha2 = "---------------TRAVA 2---------------";
input string Trava2_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava2_Ativo2 = "PETRP227";////Ativo de compra dessa trava

input string linha3 = "---------------TRAVA 3---------------";
input string Trava3_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava3_Ativo2 = "PETRP349";//Ativo de compra dessa trava

input string linha4 = "---------------TRAVA 4---------------";
input string Trava4_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava4_Ativo2 = "PETRP183";//Ativo de compra dessa trava

input string linha5 = "---------------TRAVA 5---------------";
input string Trava5_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava5_Ativo2 = "PETRP344";//Ativo de compra dessa trava

input string linha6 = "---------------TRAVA 6---------------";
input string Trava6_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava6_Ativo2 = "PETRP212";//Ativo de compra dessa trava

input string linha7 = "---------------TRAVA 7---------------";
input string Trava7_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava7_Ativo2 = "PETRP452";//Ativo de compra dessa trava

input string linha8 = "---------------TRAVA 8---------------";
input string Trava8_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava8_Ativo2 = "PETRP194";//Ativo de compra dessa trava

input string linha9 = "---------------TRAVA 9---------------";
input string Trava9_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava9_Ativo2 = "PETRP334";//Ativo de compra dessa trava

input string linha10 = "---------------TRAVA 10---------------";
input string Trava10_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava10_Ativo2 = "PETRP135";//Ativo de compra dessa trava

input string linha11 = "---------------TRAVA 11---------------";
input string Trava11_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava11_Ativo2 = "PETRP328";//Ativo de compra dessa trava

input string linha12 = "---------------TRAVA 12---------------";
input string Trava12_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava12_Ativo2 = "PETRP198";//Ativo de compra dessa trava

input string linha13 = "---------------TRAVA 13---------------";
input string Trava13_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava13_Ativo2 = "PETRP324";//Ativo de compra dessa trava

input string linha14 = "---------------TRAVA 14---------------";
input string Trava14_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava14_Ativo2 = "PETRP122";//Ativo de compra dessa trava

input string linha15 = "---------------TRAVA 15---------------";
input string Trava15_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava15_Ativo2 = "PETRP319";//Ativo de compra dessa trava

input string linha16 = "---------------TRAVA 16---------------";
input string Trava16_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava16_Ativo2 = "PETRP116";//Ativo de compra dessa trava

input string linha17 = "---------------TRAVA 17---------------";
input string Trava17_Ativo1 = "PETRP202";//Ativo de venda dessa trava
input string Trava17_Ativo2 = "PETRP314";//Ativo de compra dessa trava

input string linha18 = "---------------TRAVA 18---------------";
input string Trava18_Ativo1 = "";//Ativo de venda dessa trava
input string Trava18_Ativo2 = "";//Ativo de compra dessa trava

input string linha19 = "---------------TRAVA 19---------------";
input string Trava19_Ativo1 = "";//Ativo de venda dessa trava
input string Trava19_Ativo2 = "";//Ativo de compra dessa trava

input string linha20 = "---------------TRAVA 20---------------";
input string Trava20_Ativo1 = "";//Ativo de venda dessa trava
input string Trava20_Ativo2 = "";//Ativo de compra dessa trava

input string linha011 = "-------------------------------------";
input ulong magicNum = 123456; //Magic Number
input ulong desvPts = 0;






CTrade trade;
MqlBookInfo Info[];
MqlDateTime HoraAtual;
int DiaMem;
int DiaAtual;
int Dias = 0;
bool Zebra = false;
bool comprado = false;//ok
bool vendido = false;//ok
bool posicionado = false;//ok
bool nao_posicionado = true;//ok
bool OrdensDeAberturaNaPedra = false;
bool Sinal = false;
bool ExcessoDeTravas = false;
bool AlgumaTravaIniciada = false;

bool IniciadoTrava1 = false;
bool IniciadoTrava2 = false;
bool IniciadoTrava3 = false;
bool IniciadoTrava4 = false;
bool IniciadoTrava5 = false;
bool IniciadoTrava6 = false;
bool IniciadoTrava7 = false;
bool IniciadoTrava8 = false;
bool IniciadoTrava9 = false;
bool IniciadoTrava10 = false;
bool IniciadoTrava11 = false;
bool IniciadoTrava12 = false;
bool IniciadoTrava13 = false;
bool IniciadoTrava14 = false;
bool IniciadoTrava15 = false;
bool IniciadoTrava16 = false;
bool IniciadoTrava17 = false;
bool IniciadoTrava18 = false;
bool IniciadoTrava19 = false;
bool IniciadoTrava20 = false;

bool Desligada = false;
bool Ligada = true;
bool ChaveTrava1 = Desligada;
bool ChaveTrava2 = Desligada;
bool ChaveTrava3 = Desligada;
bool ChaveTrava4 = Desligada;
bool ChaveTrava5 = Desligada;
bool ChaveTrava6 = Desligada;
bool ChaveTrava7 = Desligada;
bool ChaveTrava8 = Desligada;
bool ChaveTrava9 = Desligada;
bool ChaveTrava10 = Desligada;
bool ChaveTrava11 = Desligada;
bool ChaveTrava12 = Desligada;
bool ChaveTrava13 = Desligada;
bool ChaveTrava14 = Desligada;
bool ChaveTrava15 = Desligada;
bool ChaveTrava16 = Desligada;
bool ChaveTrava17 = Desligada;
bool ChaveTrava18 = Desligada;
bool ChaveTrava19 = Desligada;
bool ChaveTrava20 = Desligada;

bool Tendencia_de_alta = false;

bool AbertoParaNegociacoesTrava1 = true;
bool AbertoParaNegociacoesTrava2 = true;
bool AbertoParaNegociacoesTrava3 = true;
bool AbertoParaNegociacoesTrava4 = true;
bool AbertoParaNegociacoesTrava5 = true;
bool AbertoParaNegociacoesTrava6 = true;
bool AbertoParaNegociacoesTrava7 = true;
bool AbertoParaNegociacoesTrava8 = true;
bool AbertoParaNegociacoesTrava9 = true;
bool AbertoParaNegociacoesTrava10 = true;
bool AbertoParaNegociacoesTrava11 = true;
bool AbertoParaNegociacoesTrava12 = true;
bool AbertoParaNegociacoesTrava13 = true;
bool AbertoParaNegociacoesTrava14 = true;
bool AbertoParaNegociacoesTrava15 = true;
bool AbertoParaNegociacoesTrava16 = true;
bool AbertoParaNegociacoesTrava17 = true;
bool AbertoParaNegociacoesTrava18 = true;
bool AbertoParaNegociacoesTrava19 = true;
bool AbertoParaNegociacoesTrava20 = true;
bool Alta = false;

double DiferencaTrava1 = 0;
double DiferencaTrava2 = 0;
double DiferencaTrava3 = 0;
double DiferencaTrava4 = 0;
double DiferencaTrava5 = 0;
double DiferencaTrava6 = 0;
double DiferencaTrava7 = 0;
double DiferencaTrava8 = 0;
double DiferencaTrava9 = 0;
double DiferencaTrava10 = 0;
double DiferencaTrava11 = 0;
double DiferencaTrava12 = 0;
double DiferencaTrava13 = 0;
double DiferencaTrava14 = 0;
double DiferencaTrava15 = 0;
double DiferencaTrava16 = 0;
double DiferencaTrava17 = 0;
double DiferencaTrava18 = 0;
double DiferencaTrava19 = 0;
double DiferencaTrava20 = 0;

double PrecoDeComparacaoPetro = 0;
double Balanco = 0;//Dinheiro em conta

double SpreadAberturaTrava1 = 0;
double SpreadAtualTrava1 = 0;
double SpreadAberturaTrava2 = 0;
double SpreadAtualTrava2 = 0;
double SpreadAberturaTrava3 = 0;
double SpreadAtualTrava3 = 0;
double SpreadAberturaTrava4 = 0;
double SpreadAtualTrava4 = 0;
double SpreadAberturaTrava5 = 0;
double SpreadAtualTrava5 = 0;
double SpreadAberturaTrava6 = 0;
double SpreadAtualTrava6 = 0;
double SpreadAberturaTrava7 = 0;
double SpreadAtualTrava7 = 0;
double SpreadAberturaTrava8 = 0;
double SpreadAtualTrava8 = 0;
double SpreadAberturaTrava9 = 0;
double SpreadAtualTrava9 = 0;
double SpreadAberturaTrava10 = 0;
double SpreadAtualTrava10 = 0;
double SpreadAberturaTrava11 = 0;
double SpreadAtualTrava11 = 0;
double SpreadAberturaTrava12 = 0;
double SpreadAtualTrava12 = 0;
double SpreadAberturaTrava13 = 0;
double SpreadAtualTrava13 = 0;
double SpreadAberturaTrava14 = 0;
double SpreadAtualTrava14 = 0;
double SpreadAberturaTrava15 = 0;
double SpreadAtualTrava15 = 0;
double SpreadAberturaTrava16 = 0;
double SpreadAtualTrava16 = 0;
double SpreadAberturaTrava17 = 0;
double SpreadAtualTrava17 = 0;
double SpreadAberturaTrava18 = 0;
double SpreadAtualTrava18 = 0;
double SpreadAberturaTrava19 = 0;
double SpreadAtualTrava19 = 0;
double SpreadAberturaTrava20 = 0;
double SpreadAtualTrava20 = 0;

double LucroTrava1 = 0;
double LucroTrava2 = 0;
double LucroTrava3 = 0;
double LucroTrava4 = 0;
double LucroTrava5 = 0;
double LucroTrava6 = 0;
double LucroTrava7 = 0;
double LucroTrava8 = 0;
double LucroTrava9 = 0;
double LucroTrava10 = 0;
double LucroTrava11 = 0;
double LucroTrava12 = 0;
double LucroTrava13 = 0;
double LucroTrava14 = 0;
double LucroTrava15 = 0;
double LucroTrava16 = 0;
double LucroTrava17 = 0;
double LucroTrava18 = 0;
double LucroTrava19 = 0;
double LucroTrava20 = 0;

double UltimoSpreadTrava1 = 0;
double UltimoSpreadTrava2 = 0;
double UltimoSpreadTrava3 = 0;
double UltimoSpreadTrava4 = 0;
double UltimoSpreadTrava5 = 0;
double UltimoSpreadTrava6 = 0;
double UltimoSpreadTrava7 = 0;
double UltimoSpreadTrava8 = 0;
double UltimoSpreadTrava9 = 0;
double UltimoSpreadTrava10 = 0;
double UltimoSpreadTrava11 = 0;
double UltimoSpreadTrava12 = 0;
double UltimoSpreadTrava13 = 0;
double UltimoSpreadTrava14 = 0;
double UltimoSpreadTrava15 = 0;
double UltimoSpreadTrava16 = 0;
double UltimoSpreadTrava17 = 0;
double UltimoSpreadTrava18 = 0;
double UltimoSpreadTrava19 = 0;
double UltimoSpreadTrava20 = 0;

double SpreadAcumuladoTrava1 = 0;
double SpreadAcumuladoTrava2 = 0;
double SpreadAcumuladoTrava3 = 0;
double SpreadAcumuladoTrava4 = 0;
double SpreadAcumuladoTrava5 = 0;
double SpreadAcumuladoTrava6 = 0;
double SpreadAcumuladoTrava7 = 0;
double SpreadAcumuladoTrava8 = 0;
double SpreadAcumuladoTrava9 = 0;
double SpreadAcumuladoTrava10 = 0;
double SpreadAcumuladoTrava11 = 0;
double SpreadAcumuladoTrava12 = 0;
double SpreadAcumuladoTrava13 = 0;
double SpreadAcumuladoTrava14 = 0;
double SpreadAcumuladoTrava15 = 0;
double SpreadAcumuladoTrava16 = 0;
double SpreadAcumuladoTrava17 = 0;
double SpreadAcumuladoTrava18 = 0;
double SpreadAcumuladoTrava19 = 0;
double SpreadAcumuladoTrava20 = 0;

double VolumeTrava1 = 0;
double VolumeTrava2 = 0;
double VolumeTrava3 = 0;
double VolumeTrava4 = 0;
double VolumeTrava5 = 0;
double VolumeTrava6 = 0;
double VolumeTrava7 = 0;
double VolumeTrava8 = 0;
double VolumeTrava9 = 0;
double VolumeTrava10 = 0;
double VolumeTrava11 = 0;
double VolumeTrava12 = 0;
double VolumeTrava13 = 0;
double VolumeTrava14 = 0;
double VolumeTrava15 = 0;
double VolumeTrava16 = 0;
double VolumeTrava17 = 0;
double VolumeTrava18 = 0;
double VolumeTrava19 = 0;
double VolumeTrava20 = 0;

//----------PREÇO MÉDIO DE VENDA DOS ATIVOS 1
double PrcoMedioBidAtivo1_Trava1 = 0;
double PrcoMedioBidAtivo1_Trava2 = 0;
double PrcoMedioBidAtivo1_Trava3 = 0;
double PrcoMedioBidAtivo1_Trava4 = 0;
double PrcoMedioBidAtivo1_Trava5 = 0;
double PrcoMedioBidAtivo1_Trava6 = 0;
double PrcoMedioBidAtivo1_Trava7 = 0;
double PrcoMedioBidAtivo1_Trava8 = 0;
double PrcoMedioBidAtivo1_Trava9 = 0;
double PrcoMedioBidAtivo1_Trava10 = 0;
double PrcoMedioBidAtivo1_Trava11 = 0;
double PrcoMedioBidAtivo1_Trava12 = 0;
double PrcoMedioBidAtivo1_Trava13 = 0;
double PrcoMedioBidAtivo1_Trava14 = 0;
double PrcoMedioBidAtivo1_Trava15 = 0;
double PrcoMedioBidAtivo1_Trava16 = 0;
double PrcoMedioBidAtivo1_Trava17 = 0;
double PrcoMedioBidAtivo1_Trava18 = 0;
double PrcoMedioBidAtivo1_Trava19 = 0;
double PrcoMedioBidAtivo1_Trava20 = 0;

//----------PREÇO MÉDIO DE COMPRA DOS ATIVOS 2
double PrcoMedioAskAtivo2_Trava1 = 0;
double PrcoMedioAskAtivo2_Trava2 = 0;
double PrcoMedioAskAtivo2_Trava3 = 0;
double PrcoMedioAskAtivo2_Trava4 = 0;
double PrcoMedioAskAtivo2_Trava5 = 0;
double PrcoMedioAskAtivo2_Trava6 = 0;
double PrcoMedioAskAtivo2_Trava7 = 0;
double PrcoMedioAskAtivo2_Trava8 = 0;
double PrcoMedioAskAtivo2_Trava9 = 0;
double PrcoMedioAskAtivo2_Trava10 = 0;
double PrcoMedioAskAtivo2_Trava11 = 0;
double PrcoMedioAskAtivo2_Trava12 = 0;
double PrcoMedioAskAtivo2_Trava13 = 0;
double PrcoMedioAskAtivo2_Trava14 = 0;
double PrcoMedioAskAtivo2_Trava15 = 0;
double PrcoMedioAskAtivo2_Trava16 = 0;
double PrcoMedioAskAtivo2_Trava17 = 0;
double PrcoMedioAskAtivo2_Trava18 = 0;
double PrcoMedioAskAtivo2_Trava19 = 0;
double PrcoMedioAskAtivo2_Trava20 = 0;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double BidPrice = SymbolInfoDouble(_Symbol,SYMBOL_BID); //ok Preço atual de compra (Bid)
double AskPrice = SymbolInfoDouble(_Symbol,SYMBOL_ASK);; //ok Preço atual de venda (Ask)
double Lucro = 0;
long BidSize = 0;
long AskSize = 0;
double precodecompra = 0;//ok
double precodevenda = 0;//ok
double Volume_da_Posicao = PositionGetDouble(POSITION_VOLUME);//Volume total em negociação
double OrderPrice = 0;
double Spread = 0;
double Performance = 0;

double MelhorRatioTrava1 = 0;
double MelhorRatioTrava2 = 0;
double MelhorRatioTrava3 = 0;
double MelhorRatioTrava4 = 0;
double MelhorRatioTrava5 = 0;
double MelhorRatioTrava6 = 0;
double MelhorRatioTrava7 = 0;
double MelhorRatioTrava8 = 0;
double MelhorRatioTrava9 = 0;
double MelhorRatioTrava10 = 0;
double MelhorRatioTrava11 = 0;
double MelhorRatioTrava12 = 0;
double MelhorRatioTrava13 = 0;
double MelhorRatioTrava14 = 0;
double MelhorRatioTrava15 = 0;
double MelhorRatioTrava16 = 0;
double MelhorRatioTrava17 = 0;
double MelhorRatioTrava18 = 0;
double MelhorRatioTrava19 = 0;
double MelhorRatioTrava20 = 0;

double Bid_Ativo1_Trava1 = 0;
double Ask_Ativo1_Trava1 = 0;
double Bid_Ativo2_Trava1 = 0;
double Ask_Ativo2_Trava1 = 0;

double Bid_Ativo1_Trava2 = 0;
double Ask_Ativo1_Trava2 = 0;
double Bid_Ativo2_Trava2 = 0;
double Ask_Ativo2_Trava2 = 0;

double Bid_Ativo1_Trava3 = 0;
double Ask_Ativo1_Trava3 = 0;
double Bid_Ativo2_Trava3 = 0;
double Ask_Ativo2_Trava3 = 0;

double Bid_Ativo1_Trava4 = 0;
double Ask_Ativo1_Trava4 = 0;
double Bid_Ativo2_Trava4 = 0;
double Ask_Ativo2_Trava4 = 0;

double Bid_Ativo1_Trava5 = 0;
double Ask_Ativo1_Trava5 = 0;
double Bid_Ativo2_Trava5 = 0;
double Ask_Ativo2_Trava5 = 0;

double Bid_Ativo1_Trava6 = 0;
double Ask_Ativo1_Trava6 = 0;
double Bid_Ativo2_Trava6 = 0;
double Ask_Ativo2_Trava6 = 0;

double Bid_Ativo1_Trava7 = 0;
double Ask_Ativo1_Trava7 = 0;
double Bid_Ativo2_Trava7 = 0;
double Ask_Ativo2_Trava7 = 0;

double Bid_Ativo1_Trava8 = 0;
double Ask_Ativo1_Trava8 = 0;
double Bid_Ativo2_Trava8 = 0;
double Ask_Ativo2_Trava8 = 0;

double Bid_Ativo1_Trava9 = 0;
double Ask_Ativo1_Trava9 = 0;
double Bid_Ativo2_Trava9 = 0;
double Ask_Ativo2_Trava9 = 0;

double Bid_Ativo1_Trava10 = 0;
double Ask_Ativo1_Trava10 = 0;
double Bid_Ativo2_Trava10 = 0;
double Ask_Ativo2_Trava10 = 0;

double Bid_Ativo1_Trava11 = 0;
double Ask_Ativo1_Trava11 = 0;
double Bid_Ativo2_Trava11 = 0;
double Ask_Ativo2_Trava11 = 0;

double Bid_Ativo1_Trava12 = 0;
double Ask_Ativo1_Trava12 = 0;
double Bid_Ativo2_Trava12 = 0;
double Ask_Ativo2_Trava12 = 0;

double Bid_Ativo1_Trava13 = 0;
double Ask_Ativo1_Trava13 = 0;
double Bid_Ativo2_Trava13 = 0;
double Ask_Ativo2_Trava13 = 0;

double Bid_Ativo1_Trava14 = 0;
double Ask_Ativo1_Trava14 = 0;
double Bid_Ativo2_Trava14 = 0;
double Ask_Ativo2_Trava14 = 0;

double Bid_Ativo1_Trava15 = 0;
double Ask_Ativo1_Trava15 = 0;
double Bid_Ativo2_Trava15 = 0;
double Ask_Ativo2_Trava15 = 0;

double Bid_Ativo1_Trava16 = 0;
double Ask_Ativo1_Trava16 = 0;
double Bid_Ativo2_Trava16 = 0;
double Ask_Ativo2_Trava16 = 0;

double Bid_Ativo1_Trava17 = 0;
double Ask_Ativo1_Trava17 = 0;
double Bid_Ativo2_Trava17 = 0;
double Ask_Ativo2_Trava17 = 0;

double Bid_Ativo1_Trava18 = 0;
double Ask_Ativo1_Trava18 = 0;
double Bid_Ativo2_Trava18 = 0;
double Ask_Ativo2_Trava18 = 0;

double Bid_Ativo1_Trava19 = 0;
double Ask_Ativo1_Trava19 = 0;
double Bid_Ativo2_Trava19 = 0;
double Ask_Ativo2_Trava19 = 0;

double Bid_Ativo1_Trava20 = 0;
double Ask_Ativo1_Trava20 = 0;
double Bid_Ativo2_Trava20 = 0;
double Ask_Ativo2_Trava20 = 0;

double Trava1 = 0;
double Trava2 = 0;
double Trava3 = 0;
double Trava4 = 0;
double Trava5 = 0;
double Trava6 = 0;
double Trava7 = 0;
double Trava8 = 0;
double Trava9 = 0;
double Trava10 = 0;
double Trava11 = 0;
double Trava12 = 0;
double Trava13 = 0;
double Trava14 = 0;
double Trava15 = 0;
double Trava16 = 0;
double Trava17 = 0;
double Trava18 = 0;
double Trava19 = 0;
double Trava20 = 0;

double AtualRatioTrava1 = 0;
double AtualRatioTrava2 = 0;
double AtualRatioTrava3 = 0;
double AtualRatioTrava4 = 0;
double AtualRatioTrava5 = 0;
double AtualRatioTrava6 = 0;
double AtualRatioTrava7 = 0;
double AtualRatioTrava8 = 0;
double AtualRatioTrava9 = 0;
double AtualRatioTrava10 = 0;
double AtualRatioTrava11 = 0;
double AtualRatioTrava12 = 0;
double AtualRatioTrava13 = 0;
double AtualRatioTrava14 = 0;
double AtualRatioTrava15 = 0;
double AtualRatioTrava16 = 0;
double AtualRatioTrava17 = 0;
double AtualRatioTrava18 = 0;
double AtualRatioTrava19 = 0;
double AtualRatioTrava20 = 0;

double BidPETR4 = 0;
double AskPETR4 = 0;
double PrecoPETR4 = 0;

//-------------Vetores das médias

MqlRates PETR4[];
MqlRates PETR4_2[];
double Array_Trava1_Ativo1[];
double Array_Trava1_Ativo2[];
double Array_Trava2_Ativo1[];
double Array_Trava2_Ativo2[];
double Array_Trava3_Ativo1[];
double Array_Trava3_Ativo2[];
double Array_Trava4_Ativo1[];
double Array_Trava4_Ativo2[];
double Array_Trava5_Ativo1[];
double Array_Trava5_Ativo2[];
double Array_Trava6_Ativo1[];
double Array_Trava6_Ativo2[];
double Array_Trava7_Ativo1[];
double Array_Trava7_Ativo2[];
double Array_Trava8_Ativo1[];
double Array_Trava8_Ativo2[];
double Array_Trava9_Ativo1[];
double Array_Trava9_Ativo2[];
double Array_Trava10_Ativo1[];
double Array_Trava10_Ativo2[];
double Array_Trava11_Ativo1[];
double Array_Trava11_Ativo2[];
double Array_Trava12_Ativo1[];
double Array_Trava12_Ativo2[];
double Array_Trava13_Ativo1[];
double Array_Trava13_Ativo2[];
double Array_Trava14_Ativo1[];
double Array_Trava14_Ativo2[];
double Array_Trava15_Ativo1[];
double Array_Trava15_Ativo2[];
double Array_Trava16_Ativo1[];
double Array_Trava16_Ativo2[];
double Array_Trava17_Ativo1[];
double Array_Trava17_Ativo2[];
double Array_Trava18_Ativo1[];
double Array_Trava18_Ativo2[];
double Array_Trava19_Ativo1[];
double Array_Trava19_Ativo2[];
double Array_Trava20_Ativo1[];
double Array_Trava20_Ativo2[];

//Arrays somente do último preço
double Ultimo_Trava1_A1[];
double Ultimo_Trava1_A2[];
double Ultimo_Trava2_A1[];
double Ultimo_Trava2_A2[];
double Ultimo_Trava3_A1[];
double Ultimo_Trava3_A2[];
double Ultimo_Trava4_A1[];
double Ultimo_Trava4_A2[];
double Ultimo_Trava5_A1[];
double Ultimo_Trava5_A2[];
double Ultimo_Trava6_A1[];
double Ultimo_Trava6_A2[];
double Ultimo_Trava7_A1[];
double Ultimo_Trava7_A2[];
double Ultimo_Trava8_A1[];
double Ultimo_Trava8_A2[];
double Ultimo_Trava9_A1[];
double Ultimo_Trava9_A2[];
double Ultimo_Trava10_A1[];
double Ultimo_Trava10_A2[];
double Ultimo_Trava11_A1[];
double Ultimo_Trava11_A2[];
double Ultimo_Trava12_A1[];
double Ultimo_Trava12_A2[];
double Ultimo_Trava13_A1[];
double Ultimo_Trava13_A2[];
double Ultimo_Trava14_A1[];
double Ultimo_Trava14_A2[];
double Ultimo_Trava15_A1[];
double Ultimo_Trava15_A2[];
double Ultimo_Trava16_A1[];
double Ultimo_Trava16_A2[];
double Ultimo_Trava17_A1[];
double Ultimo_Trava17_A2[];
double Ultimo_Trava18_A1[];
double Ultimo_Trava18_A2[];
double Ultimo_Trava19_A1[];
double Ultimo_Trava19_A2[];
double Ultimo_Trava20_A1[];
double Ultimo_Trava20_A2[];
double MaiorDown = 0;
double PerdaMax = 0;

double BidAcumulado_Trava1 = 0;
double BidAcumulado_Trava2 = 0;
double BidAcumulado_Trava3 = 0;
double BidAcumulado_Trava4 = 0;
double BidAcumulado_Trava5 = 0;
double BidAcumulado_Trava6 = 0;
double BidAcumulado_Trava7 = 0;
double BidAcumulado_Trava8 = 0;
double BidAcumulado_Trava9 = 0;
double BidAcumulado_Trava10 = 0;
double BidAcumulado_Trava11 = 0;
double BidAcumulado_Trava12 = 0;
double BidAcumulado_Trava13 = 0;
double BidAcumulado_Trava14 = 0;
double BidAcumulado_Trava15 = 0;
double BidAcumulado_Trava16 = 0;
double BidAcumulado_Trava17 = 0;
double BidAcumulado_Trava18 = 0;
double BidAcumulado_Trava19 = 0;
double BidAcumulado_Trava20 = 0;

double AskAcumulado_Trava1 = 0;
double AskAcumulado_Trava2 = 0;
double AskAcumulado_Trava3 = 0;
double AskAcumulado_Trava4 = 0;
double AskAcumulado_Trava5 = 0;
double AskAcumulado_Trava6 = 0;
double AskAcumulado_Trava7 = 0;
double AskAcumulado_Trava8 = 0;
double AskAcumulado_Trava9 = 0;
double AskAcumulado_Trava10 = 0;
double AskAcumulado_Trava11 = 0;
double AskAcumulado_Trava12 = 0;
double AskAcumulado_Trava13 = 0;
double AskAcumulado_Trava14 = 0;
double AskAcumulado_Trava15 = 0;
double AskAcumulado_Trava16 = 0;
double AskAcumulado_Trava17 = 0;
double AskAcumulado_Trava18 = 0;
double AskAcumulado_Trava19 = 0;
double AskAcumulado_Trava20 = 0;

//-----------Manipuladores das médias
int Handle_Trava1_Ativo1 = INVALID_HANDLE;
int Handle_Trava1_Ativo2 = INVALID_HANDLE;
int Handle_Trava2_Ativo1 = INVALID_HANDLE;
int Handle_Trava2_Ativo2 = INVALID_HANDLE;
int Handle_Trava3_Ativo1 = INVALID_HANDLE;
int Handle_Trava3_Ativo2 = INVALID_HANDLE;
int Handle_Trava4_Ativo1 = INVALID_HANDLE;
int Handle_Trava4_Ativo2 = INVALID_HANDLE;
int Handle_Trava5_Ativo1 = INVALID_HANDLE;
int Handle_Trava5_Ativo2 = INVALID_HANDLE;
int Handle_Trava6_Ativo1 = INVALID_HANDLE;
int Handle_Trava6_Ativo2 = INVALID_HANDLE;
int Handle_Trava7_Ativo1 = INVALID_HANDLE;
int Handle_Trava7_Ativo2 = INVALID_HANDLE;
int Handle_Trava8_Ativo1 = INVALID_HANDLE;
int Handle_Trava8_Ativo2 = INVALID_HANDLE;
int Handle_Trava9_Ativo1 = INVALID_HANDLE;
int Handle_Trava9_Ativo2 = INVALID_HANDLE;
int Handle_Trava10_Ativo1 = INVALID_HANDLE;
int Handle_Trava10_Ativo2 = INVALID_HANDLE;
int Handle_Trava11_Ativo1 = INVALID_HANDLE;
int Handle_Trava11_Ativo2 = INVALID_HANDLE;
int Handle_Trava12_Ativo1 = INVALID_HANDLE;
int Handle_Trava12_Ativo2 = INVALID_HANDLE;
int Handle_Trava13_Ativo1 = INVALID_HANDLE;
int Handle_Trava13_Ativo2 = INVALID_HANDLE;
int Handle_Trava14_Ativo1 = INVALID_HANDLE;
int Handle_Trava14_Ativo2 = INVALID_HANDLE;
int Handle_Trava15_Ativo1 = INVALID_HANDLE;
int Handle_Trava15_Ativo2 = INVALID_HANDLE;
int Handle_Trava16_Ativo1 = INVALID_HANDLE;
int Handle_Trava16_Ativo2 = INVALID_HANDLE;
int Handle_Trava17_Ativo1 = INVALID_HANDLE;
int Handle_Trava17_Ativo2 = INVALID_HANDLE;
int Handle_Trava18_Ativo1 = INVALID_HANDLE;
int Handle_Trava18_Ativo2 = INVALID_HANDLE;
int Handle_Trava19_Ativo1 = INVALID_HANDLE;
int Handle_Trava19_Ativo2 = INVALID_HANDLE;
int Handle_Trava20_Ativo1 = INVALID_HANDLE;
int Handle_Trava20_Ativo2 = INVALID_HANDLE;

int Periodo = 0;
int bookinfoHandle;
int QuantPosicoes = 0;//Conta as posições abertas.
int NumeroDeReset = 0;
int CountProft = 0;
int CountLoss = 0;
int aberto = 0;
int fechado = 1;
int chave = 0;
int A = 0;
int a = 0;
int b = 0;//Chave do aviso de fora de horário de negociação
int c = 0;//Contagem de trades
int d = 0;//Controle de disparo de ordens (tentativas)
int e = 0;
int f = 0;
int g = 0;
int h = 0;
int j = 0;//Controle da impressão "COMPRADO" ou "VENDIDO"
int k = 0;
int l = aberto;
int m = aberto;
int n = aberto;
int o = aberto;
int p = 0;
int q = 0;
int z = 0;

int DayTrade = 0;
int SwingTrade = 0;
int TravasAbertas = 0;
int Ch_Abertura_Trava1 = aberto;
int Ch_Fechamento_Trava1 = aberto;
int Ch_Abertura_Trava2 = aberto;
int Ch_Fechamento_Trava2 = aberto;
int Ch_Abertura_Trava3 = aberto;
int Ch_Fechamento_Trava3 = aberto;
int Ch_Abertura_Trava4 = aberto;
int Ch_Fechamento_Trava4 = aberto;
int Ch_Abertura_Trava5 = aberto;
int Ch_Fechamento_Trava5 = aberto;
int Ch_Abertura_Trava6 = aberto;
int Ch_Fechamento_Trava6 = aberto;
int Ch_Abertura_Trava7 = aberto;
int Ch_Fechamento_Trava7 = aberto;
int Ch_Abertura_Trava8 = aberto;
int Ch_Fechamento_Trava8 = aberto;
int Ch_Abertura_Trava9 = aberto;
int Ch_Fechamento_Trava9 = aberto;
int Ch_Abertura_Trava10 = aberto;
int Ch_Fechamento_Trava10 = aberto;
int Ch_Abertura_Trava11 = aberto;
int Ch_Fechamento_Trava11 = aberto;
int Ch_Abertura_Trava12 = aberto;
int Ch_Fechamento_Trava12 = aberto;
int Ch_Abertura_Trava13 = aberto;
int Ch_Fechamento_Trava13 = aberto;
int Ch_Abertura_Trava14 = aberto;
int Ch_Fechamento_Trava14 = aberto;
int Ch_Abertura_Trava15 = aberto;
int Ch_Fechamento_Trava15 = aberto;
int Ch_Abertura_Trava16 = aberto;
int Ch_Fechamento_Trava16 = aberto;
int Ch_Abertura_Trava17 = aberto;
int Ch_Fechamento_Trava17 = aberto;
int Ch_Abertura_Trava18 = aberto;
int Ch_Fechamento_Trava18 = aberto;
int Ch_Abertura_Trava19 = aberto;
int Ch_Fechamento_Trava19 = aberto;
int Ch_Abertura_Trava20 = aberto;
int Ch_Fechamento_Trava20 = aberto;

//Fator de divisão de cada trava
int FatorTrava1 = 0;
int FatorTrava2 = 0;
int FatorTrava3 = 0;
int FatorTrava4 = 0;
int FatorTrava5 = 0;
int FatorTrava6 = 0;
int FatorTrava7 = 0;
int FatorTrava8 = 0;
int FatorTrava9 = 0;
int FatorTrava10 = 0;
int FatorTrava11 = 0;
int FatorTrava12 = 0;
int FatorTrava13 = 0;
int FatorTrava14 = 0;
int FatorTrava15 = 0;
int FatorTrava16 = 0;
int FatorTrava17 = 0;
int FatorTrava18 = 0;
int FatorTrava19 = 0;
int FatorTrava20 = 0;

//Contadores TOTAIS
int TRV_Trava1 = 0;
int TRV_Trava2 = 0;
int TRV_Trava3 = 0;
int TRV_Trava4 = 0;
int TRV_Trava5 = 0;
int TRV_Trava6 = 0;
int TRV_Trava7 = 0;
int TRV_Trava8 = 0;
int TRV_Trava9 = 0;
int TRV_Trava10 = 0;
int TRV_Trava11 = 0;
int TRV_Trava12 = 0;
int TRV_Trava13 = 0;
int TRV_Trava14 = 0;
int TRV_Trava15 = 0;
int TRV_Trava16 = 0;
int TRV_Trava17 = 0;
int TRV_Trava18 = 0;
int TRV_Trava19 = 0;
int TRV_Trava20 = 0;

int DiaAberturaTrava1= 0;
int DiaFechamentoTrava1= 0;
int DiaAberturaTrava2= 0;
int DiaFechamentoTrava2= 0;
int DiaAberturaTrava3= 0;
int DiaFechamentoTrava3= 0;
int DiaAberturaTrava4= 0;
int DiaFechamentoTrava4= 0;
int DiaAberturaTrava5= 0;
int DiaFechamentoTrava5= 0;
int DiaAberturaTrava6= 0;
int DiaFechamentoTrava6= 0;
int DiaAberturaTrava7= 0;
int DiaFechamentoTrava7= 0;
int DiaAberturaTrava8= 0;
int DiaFechamentoTrava8= 0;
int DiaAberturaTrava9= 0;
int DiaFechamentoTrava9= 0;
int DiaAberturaTrava10= 0;
int DiaFechamentoTrava10= 0;
int DiaAberturaTrava11= 0;
int DiaFechamentoTrava11= 0;
int DiaAberturaTrava12= 0;
int DiaFechamentoTrava12= 0;
int DiaAberturaTrava13= 0;
int DiaFechamentoTrava13= 0;
int DiaAberturaTrava14= 0;
int DiaFechamentoTrava14= 0;
int DiaAberturaTrava15= 0;
int DiaFechamentoTrava15= 0;
int DiaAberturaTrava16= 0;
int DiaFechamentoTrava16= 0;
int DiaAberturaTrava17= 0;
int DiaFechamentoTrava17= 0;
int DiaAberturaTrava18= 0;
int DiaFechamentoTrava18= 0;
int DiaAberturaTrava19= 0;
int DiaFechamentoTrava19= 0;
int DiaAberturaTrava20= 0;
int DiaFechamentoTrava20= 0;

//Contadores de loss
int TRV_LossTrava1 = 0;
int TRV_LossTrava2 = 0;
int TRV_LossTrava3 = 0;
int TRV_LossTrava4 = 0;
int TRV_LossTrava5 = 0;
int TRV_LossTrava6 = 0;
int TRV_LossTrava7 = 0;
int TRV_LossTrava8 = 0;
int TRV_LossTrava9 = 0;
int TRV_LossTrava10 = 0;
int TRV_LossTrava11 = 0;
int TRV_LossTrava12 = 0;
int TRV_LossTrava13 = 0;
int TRV_LossTrava14 = 0;
int TRV_LossTrava15 = 0;
int TRV_LossTrava16 = 0;
int TRV_LossTrava17 = 0;
int TRV_LossTrava18 = 0;
int TRV_LossTrava19 = 0;
int TRV_LossTrava20 = 0;

int _Trava1 = aberto;
int _Trava2 = aberto;
int _Trava3 = aberto;
int _Trava4 = aberto;
int _Trava5 = aberto;
int _Trava6 = aberto;
int _Trava7 = aberto;
int _Trava8 = aberto;
int _Trava9 = aberto;
int _Trava10 = aberto;
int _Trava11 = aberto;
int _Trava12 = aberto;
int _Trava13 = aberto;
int _Trava14 = aberto;
int _Trava15 = aberto;
int _Trava16 = aberto;
int _Trava17 = aberto;
int _Trava18 = aberto;
int _Trava19 = aberto;
int _Trava20 = aberto;

bool SpreadBom_Trava1 = false;
bool SpreadBom_Trava2 = false;
bool SpreadBom_Trava3 = false;
bool SpreadBom_Trava4 = false;
bool SpreadBom_Trava5 = false;
bool SpreadBom_Trava6 = false;
bool SpreadBom_Trava7 = false;
bool SpreadBom_Trava8 = false;
bool SpreadBom_Trava9 = false;
bool SpreadBom_Trava10 = false;
bool SpreadBom_Trava11 = false;
bool SpreadBom_Trava12 = false;
bool SpreadBom_Trava13 = false;
bool SpreadBom_Trava14 = false;
bool SpreadBom_Trava15 = false;
bool SpreadBom_Trava16 = false;
bool SpreadBom_Trava17 = false;
bool SpreadBom_Trava18 = false;
bool SpreadBom_Trava19 = false;
bool SpreadBom_Trava20 = false;

//Volume das posições (algumas podem conter mais volume por atender critérios)

string Comentario_Lucros = "";

////////  _____
//////// |  ___|  _   _   _ __     ___    ___     ___   ___
//////// | |_    | | | | | '_ \   / __|  / _ \   / _ \ / __|
//////// |  _|   | |_| | | | | | | (__  | (_) | |  __/ \__ \
//////// |_|      \__,_| |_| |_|  \___|  \___/   \___| |___/
////////

//+-------------------------------------------------------------------------------------------+
//Verifica se está dentro do horário pré-programado (com inputs) para negociação

//+------------------------------------------------------------------+
//Compara Strike: verifica se são iguais e retorna falso se assim forem
bool ComparaStrike(string Ativo1, string Ativo2)
  {
   double Strike1= SymbolInfoDouble(Ativo1,SYMBOL_OPTION_STRIKE);
   double Strike2= SymbolInfoDouble(Ativo2,SYMBOL_OPTION_STRIKE);
   if((Ativo1 != "") && Strike1 != 0 && (Strike1 == Strike2))
     {
      Print("######################################################################### Erro: Os ativos ",Ativo1," e ",Ativo2," são iguais (na mesma trava)");
      return false;
     }
   if(Strike1 < Strike2)
     {
      Print("######################################################################### Erro: a ordem dos ativos ",Ativo1," e ",Ativo2," está invertida.");
      return false;
     }
   return true;
  }
//------------------------------------------------------------------------------------------------
bool DentroDoHorario()
  {
   TimeToStruct(TimeCurrent(), HoraAtual);

   if(HoraAtual.hour < 10 || HoraAtual.hour > 16)
     {
      Comment("FORA DO HORÁRIO DE NEGOCIAÇÃO");
      return false;
     }
   else
      if(HoraAtual.hour == 10 && HoraAtual.min < 1)
        {
         return false;
        }
      else
         if(HoraAtual.hour == 16 && HoraAtual.min >= 58)
           {
            return false;
           }
         else
           {
            return true;
           }
  }
//---------------------------------------------------------------------------------------
//Horário restrito a somente abertura de posições
bool DentroDoHorarioRESTRITO()
  {
   TimeToStruct(TimeCurrent(), HoraAtual);

   if(HoraAtual.hour < HoraInicio || HoraAtual.hour > HoraFinal)
     {
      Comment("FORA DO HORÁRIO DE NEGOCIAÇÃO");
      return false;
     }
   else
      if(HoraAtual.hour == HoraInicio && HoraAtual.min < MinutoInicio)
        {
         return false;
        }
      else
         if(HoraAtual.hour == HoraFinal && HoraAtual.min >= MinutosFinal)
           {
            return false;
           }
         else
           {
            return true;
           }
  }




//--------------------------------------------------------------------------------------------------
//Imprime a hora
void HoraExata()
  {
   TimeToStruct(TimeCurrent(),HoraAtual);
   Print("==================================================================================================== ",HoraAtual.hour,":",HoraAtual.min,"h");
  }
//----------------------------------------------------------------------------------------------
//Captura o valor do bid
double Get_Bid(string Ativo)
  {
   double Bid = 0;
   MqlBookInfo BookInfo[];
   bool getBook = MarketBookGet(Ativo,BookInfo);
   for(int i=0; i<ArraySize(BookInfo)-1; i++)
     {
      if(BookInfo[i].type != BookInfo[i+1].type)//Verifica onde ocorre, na lista, a mudança de venda pra compra
        {
         Bid = BookInfo[i+1].price;
        }
     }
   if(!getBook)
     {
      Print("Erro ao gravar preços do Bid do ativo: ", Ativo);
     }
   NormalizeDouble(Bid,_Digits);
   MarketBookRelease(Ativo);
   return(Bid);
  }

//----------------------------------------------------------------------------------------------
//Captura o valor do ask
double Get_Ask(string Ativo)
  {
   double Ask = 0;
   MqlBookInfo BookInfo[];
   bool getBook = MarketBookGet(Ativo,BookInfo);
   for(int i=0; i<ArraySize(BookInfo)-1; i++)
     {
      if(BookInfo[i].type != BookInfo[i+1].type)//Verifica onde ocorre, na lista, a mudança de venda pra compra
        {
         BidPrice = BookInfo[i].price;
        }
     }
   if(!getBook)
     {
      Print("Erro ao gravar preços do Ask do ativo: ", Ativo);
     }
   NormalizeDouble(Ask,_Digits);
   MarketBookRelease(Ativo);
   return(Ask);
  }


//+------------------------------------------------------------------+
//Razão entre ativo 1 e ativo 2
double GetRatioAtual(string Ativo_1, string Ativo_2)
  {
   double AtualRatio =  SymbolInfoDouble(Trava1_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava1_Ativo2,SYMBOL_ASK);
   return(AtualRatio);
  }

//Inicia negociação de trava de alta------------------------------------------------------------
void IniciaTrava(string Ativo1, string Ativo2, double Bid1, double Ask2)
  {
   trade.Sell(Lote,Ativo1,Bid1,0,0,"Venda");
   trade.Buy(Lote,Ativo2,Ask2,0,0,"Compra");
   b++;
  }
//Fechar negociação de trava--------------------------------------------------------------------
void FecharTrava(double Volume, string Ativo1, string Ativo2,double Bid2, double Ask1)
  {
   trade.Buy(Volume,Ativo1,Ask1,0,0);
   trade.Sell(Volume,Ativo2,Bid2,0,0);
  }

//+------------------------------------------------------------------+
//Salva os valores de bid em um período de x candles
void SalvaBids(string Ativo, int Periodoo, double &Array[])
  {
   ArrayInitialize(Array, 0);  // Inicializa o array com zero
   int Handle = iMA(Ativo,PERIOD_CURRENT,Periodoo,0,MODE_SMA,PRICE_MEDIAN);
   CopyBuffer(Handle,0,0,Periodoo,Array);
  }
//+------------------------------------------------------------------+
//Salva os valores de ask em um período de x candles
void SalvaAsks(string Ativo, int Periodoo, double &Array[])
  {
   ArrayInitialize(Array, 0);  // Inicializa o array com zero
   int Handle = iMA(Ativo,PERIOD_CURRENT,Periodoo,0,MODE_SMA,PRICE_MEDIAN);
   CopyBuffer(Handle,0,0,Periodoo,Array);

  }

//Abre posição de compra à mercado--------------------------------------------------------------
void Compre_a_mercado()
  {
   trade.Buy(Lote,_Symbol,AskPrice,0,0,"Compra a mercado");//Ordem de compra
  }
//-----------------------------------------------------------------------------------------------
//Abre posição de venda à mercado
void Venda_a_mercado()
  {

   trade.Sell(Lote,_Symbol,BidPrice,0,0,"Venda a mercado");//Ordem de venda

  }
//----------------------------------------------------------------------------------------------
//Venda no preço de compra (zerar)
void VendaNoPrecoDeCompra()
  {

   if(c==aberto)
     {
      trade.SellLimit(Lote,precodecompra,_Symbol,0,0,ORDER_TIME_DAY,0,"Vender no preço de compra");
      c=fechado;
     }

  }


//----------------------------------------------------------------------------------------
//Envia ordem no preço de venda (zerar)
void CompraNoPrecoDeVenda()
  {

   if(c==aberto)
     {
      trade.BuyLimit(Lote,precodevenda,_Symbol,0,0,ORDER_TIME_DAY,0,"Comprar no preço de venda");
      c=fechado;
     }

  }

//+------------------------------------------------------------------+
//Abrir trava
void AbrirPosicao(string Ativo1, string Ativo2)
  {
   trade.Sell(Lote,Ativo1,SymbolInfoDouble(Ativo1,SYMBOL_BID),0,0,"Venda");
   trade.Buy(Lote,Ativo2,SymbolInfoDouble(Ativo2,SYMBOL_ASK),0,0,"Compra");
  }

//+------------------------------------------------------------------+
//Fechar trava
void FecharPosicao(string Ativo1, string Ativo2)
  {
   trade.Buy(Lote,Ativo1,SymbolInfoDouble(Ativo1,SYMBOL_ASK),0,0,"Recompra");
   trade.Sell(Lote,Ativo2,SymbolInfoDouble(Ativo2,SYMBOL_BID),0,0,"Revenda");
  }
//--------------------------------------------------------------------------------------------------
//Cancela ordem específica (que tenha determinado comentário)
void CancelaEstaOrdem(string Comentario_da_ordem)
  {
   for(int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if(OrderGetTicket(i) > 0)
        {
         if(OrderGetString(ORDER_COMMENT)== Comentario_da_ordem)
           {
            trade.OrderDelete(OrderGetTicket(i));
            if(OrderGetTicket(i) == 0)
              {
               Print("Ordem '",Comentario_da_ordem,"'"," Cancelada com sucesso ______________________ Cod:012.1");
               reset();
              }
           }
        }
     }
  }
//--------------------------------------------------------------------------------------------------
//Limpar ordens pendentes (fechá-las)
void LimparOdens()
  {
   for(int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if(OrderGetTicket(i) > 0)
        {
         if(OrderGetString(ORDER_SYMBOL)==Symbol())
           {
            trade.OrderDelete(OrderGetTicket(i));
            if(OrderGetTicket(i) == 0)
              {
               Print("Ordens canceladas com sucesso _____________________________ Cod:013");
               reset();
              }
           }
        }
     }
  }

//Fechar posição (De compra ou venda) urgentemente
void FecharPosicaoUrgente() //Vende a mercado, essa opção é para casos urgentes como um stop loss, por exemplo.
  {

   for(int i = PositionsTotal()-1; i>=0; i--)
     {
      string symbol = PositionGetSymbol(i);
      ulong magic = PositionGetInteger(POSITION_MAGIC);
      if(symbol == _Symbol)
        {
         ulong PositionTicket = PositionGetInteger(POSITION_TICKET);
         trade.PositionClose(PositionTicket, desvPts);
         if(trade.PositionClose(PositionTicket, desvPts))
           {
            Print("Posição Fechada com urgência ____________________________ Cod:015");
           }
        }
     }
  }
//-----------------------------------------------------------------------------------------------
//Reseta algumas variáveis
void reset()
  {
   chave = 0;
   Zebra = false;
   Sinal = false;
   chave = aberto;
   Spread = 0;
   Lucro = 0;
   A= aberto;
//"a" e "b" são contagens de trades, não devem ser zerados
   c= aberto;
   d= aberto;
   e= aberto;
   f= aberto;
   g= aberto;
   h= aberto;
   j = aberto;
   k = aberto;
   l = aberto;
   m = aberto;
   n = aberto;
   o = aberto;
   p = 0;
   q = 1;//Só é zero quando o rebô inicializa
  }
//-----------------------------------------------------------------------------------------------
//Conta posições abertas.
int CountPositions(string Ativo1, string Ativo2)
  {
   int i, CntPosit = 0;
   ulong TICKET;
   for(i = PositionsTotal() - 1; i >= 0; i --)
     {
      TICKET = PositionGetTicket(i);
      if(TICKET > 0)
        {
         if(PositionGetString(POSITION_SYMBOL) == _Symbol)
           {
            CntPosit ++;
           }
        }
     }
   return(CntPosit);
  }
//-----------------------------------------------------------------------------------------------
//Calcular média das razões entre dois ativos
double Calcular_Ratio(double &Array1[], double &Array2[])
  {
   double Ratio = 0;
   double MelhorRatio = 0;
   for(int i = 0; i<ArraySize(Array1); i++)
     {
      Ratio = Array1[i] - Array2[i];
      if(MelhorRatio < Ratio)
        {
         MelhorRatio = Ratio;
        }
     }
   return(MelhorRatio);
  }
//+------------------------------------------------------------------------------------+
//Conta Ordens com comentário específico
int ContaOrdens(string Comentario_Da_Ordem)
  {
   int i, Conta = 0;
   ulong Tick;
   for(i = OrdersTotal() - 1; i >= 0; i --)
     {
      Tick = OrderGetTicket(i);
      if(Tick > 0)
        {
         if(OrderGetString(ORDER_COMMENT)== Comentario_Da_Ordem)
           {
            Conta ++;
           }
        }
     }
   return(Conta);
  }

//---------------------------------------------------------------------------------------
//Verifica se foi DayTrade ou SwingTrade
void VerificaTrade(int Dia_Abertura)
  {
   if(Dia_Abertura == HoraAtual.day_of_year)
     {
      DayTrade += 1;
     }
   else
     {
      SwingTrade += 1;
     }
  }
//---------------------------------------------------------------------------------------
//Confere spread da trava (preço do ativo 1 - preço do ativo 2)
bool TamanhoDoSpread(string Ativo1, string Ativo2)
  {
   if(Ativo1 != "" && Ativo2 != "")
     {
      double PrecoPontaComprada = SymbolInfoDouble(Ativo2,SYMBOL_ASK);
      if(PrecoPontaComprada < MenorPrecoAceito)
        {
         Print("===========================================================================> O ativo: ", Ativo2," está com o preço inferior a R$",MenorPrecoAceito);
         return false;
        }
      else
        {
         return true;
        }
     }
   else
     {
      return true;
     }
  }
//+------------------------------------------------------------------------------------+
//Dispara duas ordens na pedra
void DispararOrdem()
  {
//Em construção
  }
//+------------------------------------------------------------------+
//Captura a maior queda (DrawDown) enquanto a posição estiver aberta
void CapturaMaiorDown(double Lucro_Atual)
  {
   if(Lucro_Atual < MaiorDown)
     {
      MaiorDown = Lucro_Atual;
     }
  }
//+------------------------------------------------------------------+
//Calcula Perda máxima
double PerdaMaxima(double Lucro_da_posicao)
  {
   if(Lucro_da_posicao < PerdaMax)
     {
      PerdaMax = Lucro_da_posicao;
     }
   return(PerdaMax);
  }
//-----------------------------------------------------------------
//Conta os dia do trade
int ContaDiasDeTrade()
  {
   DiaAtual = HoraAtual.day_of_year;
   if(DiaMem != DiaAtual)
     {
      Dias++;
      DiaMem = DiaAtual;
     }
   return(Dias);
  }


//-------------------------------------------------------------------
//Comenta o lucro de cada trava aberta no topo do gráfico
void Comentar()
  {
   string TXTrava1, TXTrava2, TXTrava3, TXTrava4, TXTrava5, TXTrava6, TXTrava7, TXTrava8, TXTrava9, TXTrava10, TXTrava11, TXTrava12, TXTrava13, TXTrava14, TXTrava15, TXTrava16, TXTrava17, TXTrava18, TXTrava19, TXTrava20;
   if(IniciadoTrava1)
     {
      TXTrava1 = " Trava1: R$" + DoubleToString(LucroTrava1,2);
     }
   else
     {
      TXTrava1 = "";
     }
   if(IniciadoTrava2)
     {
      TXTrava2 = " Trava2: R$" + DoubleToString(LucroTrava2,2);
     }
   else
     {
      TXTrava2 = "";
     }
   if(IniciadoTrava3)
     {
      TXTrava3 = " Trava3: R$" + DoubleToString(LucroTrava3,2);
     }
   else
     {
      TXTrava3 = "";
     }
   if(IniciadoTrava4)
     {
      TXTrava4 = " Trava4: R$" + DoubleToString(LucroTrava4,2);
     }
   else
     {
      TXTrava4 = "";
     }
   if(IniciadoTrava5)
     {
      TXTrava5 = " Trava5: R$" + DoubleToString(LucroTrava5,2);
     }
   else
     {
      TXTrava5 = "";
     }
   if(IniciadoTrava6)
     {
      TXTrava6 = " Trava6: R$" + DoubleToString(LucroTrava6,2);
     }
   else
     {
      TXTrava6 = "";
     }
   if(IniciadoTrava7)
     {
      TXTrava7 = " Trava7: R$" + DoubleToString(LucroTrava7,2);
     }
   else
     {
      TXTrava7 = "";
     }
   if(IniciadoTrava8)
     {
      TXTrava8 = " Trava8: R$" + DoubleToString(LucroTrava8,2);
     }
   else
     {
      TXTrava8 = "";
     }
   if(IniciadoTrava9)
     {
      TXTrava9 = " Trava9: R$" + DoubleToString(LucroTrava9,2);
     }
   else
     {
      TXTrava9 = "";
     }
   if(IniciadoTrava10)
     {
      TXTrava10 = " Trava10: R$" + DoubleToString(LucroTrava10,2);
     }
   else
     {
      TXTrava10 = "";
     }
   if(IniciadoTrava11)
     {
      TXTrava11 = " Trava11: R$" + DoubleToString(LucroTrava11,2);
     }
   else
     {
      TXTrava11 = "";
     }
   if(IniciadoTrava12)
     {
      TXTrava12 = " Trava12: R$" + DoubleToString(LucroTrava12,2);
     }
   else
     {
      TXTrava12 = "";
     }
   if(IniciadoTrava13)
     {
      TXTrava13 = " Trava13: R$" + DoubleToString(LucroTrava13,2);
     }
   else
     {
      TXTrava13 = "";
     }
   if(IniciadoTrava14)
     {
      TXTrava14 = " Trava14: R$" + DoubleToString(LucroTrava14,2);
     }
   else
     {
      TXTrava14 = "";
     }
   if(IniciadoTrava15)
     {
      TXTrava15 = " Trava15: R$" + DoubleToString(LucroTrava15,2);
     }
   else
     {
      TXTrava15 = "";
     }
   if(IniciadoTrava16)
     {
      TXTrava16 = " Trava16: R$" + DoubleToString(LucroTrava16,2);
     }
   else
     {
      TXTrava16 = "";
     }
   if(IniciadoTrava17)
     {
      TXTrava17 = " Trava17: R$" + DoubleToString(LucroTrava17,2);
     }
   else
     {
      TXTrava17 = "";
     }
   if(IniciadoTrava18)
     {
      TXTrava18 = " Trava18: R$" + DoubleToString(LucroTrava18,2);
     }
   else
     {
      TXTrava18 = "";
     }
   if(IniciadoTrava19)
     {
      TXTrava19 = " Trava19: R$" + DoubleToString(LucroTrava19,2);
     }
   else
     {
      TXTrava19 = "";
     }
   if(IniciadoTrava20)
     {
      TXTrava20 = " Trava20: R$" + DoubleToString(LucroTrava20,2);
     }
   else
     {
      TXTrava20 = "";
     }
   Comentario_Lucros = TXTrava1 + TXTrava2 + TXTrava3 + TXTrava4 + TXTrava5 + TXTrava6 + TXTrava7 + TXTrava8 + TXTrava9 + TXTrava10 + TXTrava11 + TXTrava12 + TXTrava13 + TXTrava14 + TXTrava15 + TXTrava16 + TXTrava17 + TXTrava18 + TXTrava19 + TXTrava20;
   Comment(TXTrava1, TXTrava2, TXTrava3, TXTrava4, TXTrava5, TXTrava6, TXTrava7, TXTrava8, TXTrava9, TXTrava10, TXTrava11, TXTrava12, TXTrava13, TXTrava14, TXTrava15, TXTrava16, TXTrava17, TXTrava18, TXTrava19, TXTrava20);
  }
//Normaliza double para x dígitos após a vírgula
double NormalizaDoubleDigitos(double &variavelDouble, int digitos)
  {
   string String = "";
   double Double = 0;
   String = DoubleToString(variavelDouble,digitos);
   Double = StringToDouble(String);
   variavelDouble = Double;
   return(variavelDouble);
  }
//----------------------------------------------------------------------
//Verifica (registra) e imprime os valores de compra e venda dos ativos, assim como também o lucro obtido
void CalculaImprimeLucroDasTravas(double ValorDeCompraAtivo1, double ValorDeVendaAtivo1, double ValorDeCompraAtivo2, double ValorDeVendaAtivo2)
  {
   double LucroAT1 = ValorDeVendaAtivo1 - ValorDeCompraAtivo1;
   double LucroAT2 = ValorDeVendaAtivo2 - ValorDeCompraAtivo2;
   double LucroDaTrava = ((LucroAT1) + (LucroAT2));
   Print("                                                                                           Valor de compra ativo 1: R$",NormalizaDoubleDigitos(ValorDeCompraAtivo1,3),"   Valor de venda ativo 1: R$",NormalizaDoubleDigitos(ValorDeVendaAtivo1,3)," = R$",NormalizaDoubleDigitos(LucroAT1,3));
   Print("                                                                                           Valor de compra ativo 2: R$",NormalizaDoubleDigitos(ValorDeCompraAtivo2,3),"   Valor de venda ativo 2: R$",NormalizaDoubleDigitos(ValorDeVendaAtivo2,3)," = R$",NormalizaDoubleDigitos(LucroAT2,3));
   Print("                                                                                                                  Lucro dessa trava: R$",NormalizaDoubleDigitos(LucroDaTrava,3));
  }
//+------------------------------------------------------------------+
//Busca o Bid Médio
double BidMedio(double Bid_Acumulado, int Fator_de_Divisao)
  {
   double Medio = 0;
   Medio = Bid_Acumulado / Fator_de_Divisao;
   return(Medio);
  }
//+------------------------------------------------------------------+
//Busca o Ask Médio
double AskMedio(double Ask_Acumulado, int Fator_de_Divisao)
  {
   double Medio = 0;
   Medio = Ask_Acumulado / Fator_de_Divisao;
   return(Medio);
  }

//+------------------------------------------------------------------+
int OnInit()
  {
//Verifica se a senha está correta
   if(Senha != "020220")
     {
      Print("###################################################### Erro: SENHA INCORRETA ##################################################################");
      return (INIT_FAILED);
     }
//Verifica se o spread está com uma distância boa para os preços de compra e venda não ficarem iguais
   if(!TamanhoDoSpread(Trava1_Ativo1, Trava1_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava2_Ativo1, Trava2_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava3_Ativo1, Trava3_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava4_Ativo1, Trava4_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava5_Ativo1, Trava5_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava6_Ativo1, Trava6_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava7_Ativo1, Trava7_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava8_Ativo1, Trava8_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava9_Ativo1, Trava9_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava10_Ativo1, Trava10_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava11_Ativo1, Trava11_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava12_Ativo1, Trava12_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava13_Ativo1, Trava13_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava14_Ativo1, Trava14_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava15_Ativo1, Trava15_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava16_Ativo1, Trava16_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava17_Ativo1, Trava17_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava18_Ativo1, Trava18_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava19_Ativo1, Trava19_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!TamanhoDoSpread(Trava20_Ativo1, Trava20_Ativo2))
     {
      return (INIT_FAILED);
     }

   EventSetTimer(Seg);
//Verifica se os strikes estão corretos para as travas serem de alta
   if(!ComparaStrike(Trava1_Ativo1,Trava1_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava2_Ativo1,Trava2_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava3_Ativo1,Trava3_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava4_Ativo1,Trava4_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava5_Ativo1,Trava5_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava6_Ativo1,Trava6_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava7_Ativo1,Trava7_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava8_Ativo1,Trava8_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava9_Ativo1,Trava9_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava10_Ativo1,Trava10_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava11_Ativo1,Trava11_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava12_Ativo1,Trava12_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava13_Ativo1,Trava13_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava14_Ativo1,Trava14_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava15_Ativo1,Trava15_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava16_Ativo1,Trava16_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava17_Ativo1,Trava17_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava18_Ativo1,Trava18_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava19_Ativo1,Trava19_Ativo2))
     {
      return (INIT_FAILED);
     }
   if(!ComparaStrike(Trava20_Ativo1,Trava20_Ativo2))
     {
      return (INIT_FAILED);
     }

   MessageBox("Robô inicializado, Limpe o painel Experts");
   ArraySetAsSeries(Array_Trava1_Ativo1,true);
   ArraySetAsSeries(Array_Trava1_Ativo2,true);

   ArraySetAsSeries(Array_Trava2_Ativo1,true);
   ArraySetAsSeries(Array_Trava2_Ativo2,true);

   ArraySetAsSeries(Array_Trava3_Ativo1,true);
   ArraySetAsSeries(Array_Trava3_Ativo2,true);

   ArraySetAsSeries(Array_Trava4_Ativo1,true);
   ArraySetAsSeries(Array_Trava4_Ativo2,true);

   ArraySetAsSeries(Array_Trava5_Ativo1,true);
   ArraySetAsSeries(Array_Trava5_Ativo2,true);

   ArraySetAsSeries(Array_Trava6_Ativo1,true);
   ArraySetAsSeries(Array_Trava6_Ativo2,true);

   ArraySetAsSeries(Array_Trava7_Ativo1,true);
   ArraySetAsSeries(Array_Trava7_Ativo2,true);

   ArraySetAsSeries(Array_Trava8_Ativo1,true);
   ArraySetAsSeries(Array_Trava8_Ativo2,true);

   ArraySetAsSeries(Array_Trava9_Ativo1,true);
   ArraySetAsSeries(Array_Trava9_Ativo2,true);

   ArraySetAsSeries(Array_Trava10_Ativo1,true);
   ArraySetAsSeries(Array_Trava10_Ativo2,true);

   ArraySetAsSeries(Array_Trava11_Ativo1,true);
   ArraySetAsSeries(Array_Trava11_Ativo2,true);

   ArraySetAsSeries(Array_Trava12_Ativo1,true);
   ArraySetAsSeries(Array_Trava12_Ativo2,true);

   ArraySetAsSeries(Array_Trava13_Ativo1,true);
   ArraySetAsSeries(Array_Trava13_Ativo2,true);

   ArraySetAsSeries(Array_Trava14_Ativo1,true);
   ArraySetAsSeries(Array_Trava14_Ativo2,true);

   ArraySetAsSeries(Array_Trava15_Ativo1,true);
   ArraySetAsSeries(Array_Trava15_Ativo2,true);

   ArraySetAsSeries(Array_Trava16_Ativo1,true);
   ArraySetAsSeries(Array_Trava16_Ativo2,true);

   ArraySetAsSeries(Array_Trava17_Ativo1,true);
   ArraySetAsSeries(Array_Trava17_Ativo2,true);

   ArraySetAsSeries(Array_Trava18_Ativo1,true);
   ArraySetAsSeries(Array_Trava18_Ativo2,true);

   ArraySetAsSeries(Array_Trava19_Ativo1,true);
   ArraySetAsSeries(Array_Trava19_Ativo2,true);

   ArraySetAsSeries(Array_Trava20_Ativo1,true);
   ArraySetAsSeries(Array_Trava20_Ativo2,true);


//-----------------------------------------------------------
   ArraySetAsSeries(Ultimo_Trava1_A1,true);
   ArraySetAsSeries(Ultimo_Trava1_A2,true);

   ArraySetAsSeries(Ultimo_Trava2_A1,true);
   ArraySetAsSeries(Ultimo_Trava2_A2,true);

   ArraySetAsSeries(Ultimo_Trava3_A1,true);
   ArraySetAsSeries(Ultimo_Trava3_A2,true);

   ArraySetAsSeries(Ultimo_Trava4_A1,true);
   ArraySetAsSeries(Ultimo_Trava4_A2,true);

   ArraySetAsSeries(Ultimo_Trava5_A1,true);
   ArraySetAsSeries(Ultimo_Trava5_A2,true);

   ArraySetAsSeries(Ultimo_Trava6_A1,true);
   ArraySetAsSeries(Ultimo_Trava6_A2,true);

   ArraySetAsSeries(Ultimo_Trava7_A1,true);
   ArraySetAsSeries(Ultimo_Trava7_A2,true);

   ArraySetAsSeries(Ultimo_Trava8_A1,true);
   ArraySetAsSeries(Ultimo_Trava8_A2,true);

   ArraySetAsSeries(Ultimo_Trava9_A1,true);
   ArraySetAsSeries(Ultimo_Trava9_A2,true);

   ArraySetAsSeries(Ultimo_Trava10_A1,true);
   ArraySetAsSeries(Ultimo_Trava10_A2,true);

   ArraySetAsSeries(Ultimo_Trava11_A1,true);
   ArraySetAsSeries(Ultimo_Trava11_A2,true);

   ArraySetAsSeries(Ultimo_Trava12_A1,true);
   ArraySetAsSeries(Ultimo_Trava12_A2,true);

   ArraySetAsSeries(Ultimo_Trava13_A1,true);
   ArraySetAsSeries(Ultimo_Trava13_A2,true);

   ArraySetAsSeries(Ultimo_Trava14_A1,true);
   ArraySetAsSeries(Ultimo_Trava14_A2,true);

   ArraySetAsSeries(Ultimo_Trava15_A1,true);
   ArraySetAsSeries(Ultimo_Trava15_A2,true);

   ArraySetAsSeries(Ultimo_Trava16_A1,true);
   ArraySetAsSeries(Ultimo_Trava16_A2,true);

   ArraySetAsSeries(Ultimo_Trava17_A1,true);
   ArraySetAsSeries(Ultimo_Trava17_A2,true);

   ArraySetAsSeries(Ultimo_Trava18_A1,true);
   ArraySetAsSeries(Ultimo_Trava18_A2,true);

   ArraySetAsSeries(Ultimo_Trava19_A1,true);
   ArraySetAsSeries(Ultimo_Trava19_A2,true);

   ArraySetAsSeries(Ultimo_Trava20_A1,true);
   ArraySetAsSeries(Ultimo_Trava20_A2,true);

   ArraySetAsSeries(PETR4,true);
   ArraySetAsSeries(PETR4_2,true);

   return(INIT_SUCCEEDED);
  }



//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   string PluralSingularDeDias = " DIAS";
   if(Dias < 2)
     {
      PluralSingularDeDias = " DIA";
     }

   Print("================================================================================================================================== RELATÓRIO DE ",Dias,PluralSingularDeDias);
   Print("======================================================================================================================== Total de trades: ",c);
   Print("======================================================================================================================== DayTrades: ",DayTrade,"    SwingTrades: ",SwingTrade);
   if(PerdaMax < 0)
     {
      PerdaMax = (PerdaMax * Lote) * -1;
     }
   Performance = (CountProft / (c-TravasAbertas))*100;
   string Perf = DoubleToString(Performance,2);

   Print("======================================================================================================================== TOTAL:   ",CountProft," Gain       ",CountLoss," Loss","                 Performance ==> ",Perf,"%");
   Print("======================================================================================================================== Finalizado com ", TravasAbertas," travas ainda abertas");
   Print("======================================================================================================================== MAIOR PERDA: -R$",DoubleToString(PerdaMax,2));
   Print("======================================================================================================================== DAWN MÁXIMO: ",DoubleToString(MaiorDown,2),"  (-R$",DoubleToString((MaiorDown*Lote)*-1,2),")");
   Print("======================================================================================================================== BALANÇO: R$",Balanco);
   Print("======================================================================================================================== Trava 1 = ",TRV_Trava1);
   Print("======================================================================================================================== Trava 2 = ",TRV_Trava2);
   Print("======================================================================================================================== Trava 3 = ",TRV_Trava3);
   Print("======================================================================================================================== Trava 4 = ",TRV_Trava4);
   Print("======================================================================================================================== Trava 5 = ",TRV_Trava5);
   Print("======================================================================================================================== Trava 6 = ",TRV_Trava6);
   Print("======================================================================================================================== Trava 7 = ",TRV_Trava7);
   Print("======================================================================================================================== Trava 8 = ",TRV_Trava8);
   Print("======================================================================================================================== Trava 9 = ",TRV_Trava9);
   Print("======================================================================================================================== Trava 10 = ",TRV_Trava10);
   Print("======================================================================================================================== Trava 11 = ",TRV_Trava11);
   Print("======================================================================================================================== Trava 12 = ",TRV_Trava12);
   Print("======================================================================================================================== Trava 13 = ",TRV_Trava13);
   Print("======================================================================================================================== Trava 14 = ",TRV_Trava14);
   Print("======================================================================================================================== Trava 15 = ",TRV_Trava15);
   Print("======================================================================================================================== Trava 16 = ",TRV_Trava16);
   Print("======================================================================================================================== Trava 17 = ",TRV_Trava17);
   Print("======================================================================================================================== Trava 18 = ",TRV_Trava18);
   Print("======================================================================================================================== Trava 19 = ",TRV_Trava19);
   Print("======================================================================================================================== Trava 20 = ",TRV_Trava20);

   Print("  ");
   Print("======================================================================================================================== TRAVAS COM LOSS");
   Print("======================================================================================================================== Trava 1 = ",TRV_LossTrava1);
   Print("======================================================================================================================== Trava 2 = ",TRV_LossTrava2);
   Print("======================================================================================================================== Trava 3 = ",TRV_LossTrava3);
   Print("======================================================================================================================== Trava 4 = ",TRV_LossTrava4);
   Print("======================================================================================================================== Trava 5 = ",TRV_LossTrava5);
   Print("======================================================================================================================== Trava 6 = ",TRV_LossTrava6);
   Print("======================================================================================================================== Trava 7 = ",TRV_LossTrava7);
   Print("======================================================================================================================== Trava 8 = ",TRV_LossTrava8);
   Print("======================================================================================================================== Trava 9 = ",TRV_LossTrava9);
   Print("======================================================================================================================== Trava 10 = ",TRV_LossTrava10);
   Print("======================================================================================================================== Trava 11 = ",TRV_LossTrava11);
   Print("======================================================================================================================== Trava 12 = ",TRV_LossTrava12);
   Print("======================================================================================================================== Trava 13 = ",TRV_LossTrava13);
   Print("======================================================================================================================== Trava 14 = ",TRV_LossTrava14);
   Print("======================================================================================================================== Trava 15 = ",TRV_LossTrava15);
   Print("======================================================================================================================== Trava 16 = ",TRV_LossTrava16);
   Print("======================================================================================================================== Trava 17 = ",TRV_LossTrava17);
   Print("======================================================================================================================== Trava 18 = ",TRV_LossTrava18);
   Print("======================================================================================================================== Trava 19 = ",TRV_LossTrava19);
   Print("======================================================================================================================== Trava 20 = ",TRV_LossTrava20);

   Print("======================================================================================================================== Finalizado com ", TravasAbertas," travas ainda abertas");


   Print("Robô Finalizado");
   Comment("");
   EventKillTimer();
  }


////// _____
//////|  ___|
//////| |__   _ __    __ _  _ __   ___  _ __    __ _   __ _   ___  _ __   ___
//////|  __| | '_ \  / _` || '__| / _ \| '_ \  / _` | / _` | / _ \| '_ \ / __|
//////| |___ | | | || (_| || |   |  __/| | | || (_| || (_| ||  __/| | | |\__ \
//////\____/ |_| |_| \__, ||_|    \___||_| |_| \__,_| \__, | \___||_| |_||___/
//////                __/ |                            __/ |
//////               |___/                            |___/
//##################-GERAL: REGRAS, ATRIBUIÇÕES E CONDIÇÕES-##################

//##############################################################################
//#                             INÍCIO ONTICK                                  #
//##############################################################################

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTimer()
  {
   ContaDiasDeTrade();
   posicionado = PositionsTotal() > 0;
   nao_posicionado = PositionsTotal() == 0;

   TimeToStruct(TimeCurrent(),HoraAtual);
   BidPETR4 = SymbolInfoDouble("PETR4",SYMBOL_BID);
   AskPETR4 = SymbolInfoDouble("PETR4",SYMBOL_ASK);
   PrecoPETR4 = (BidPETR4 + AskPETR4)/2;
   if(IniciadoTrava1 || IniciadoTrava2 || IniciadoTrava3 || IniciadoTrava4 || IniciadoTrava5 || IniciadoTrava6 || IniciadoTrava7 || IniciadoTrava8 || IniciadoTrava9 || IniciadoTrava10 || IniciadoTrava11 || IniciadoTrava12 || IniciadoTrava13 || IniciadoTrava14 || IniciadoTrava15 || IniciadoTrava16 || IniciadoTrava17 || IniciadoTrava18 || IniciadoTrava19 || IniciadoTrava20)
     {
      AlgumaTravaIniciada = true;
     }
   else
     {
      AlgumaTravaIniciada = false;
     }

   if(AlgumaTravaIniciada)
     {
      ObjectCreate(0,"Texto",OBJ_LABEL,0,0,0);
      ObjectSetInteger(0,"Texto",OBJPROP_XDISTANCE,1200);
      ObjectSetInteger(0,"Texto",OBJPROP_YDISTANCE,50);
      ObjectSetInteger(0,"Texto",OBJPROP_COLOR,clrSlateGray);
      ObjectSetInteger(0,"Texto",OBJPROP_ANCHOR,ANCHOR_RIGHT_UPPER);
      ObjectSetString(0,"Texto",OBJPROP_TEXT,Comentario_Lucros);
      ObjectSetString(0,"Texto",OBJPROP_FONT,"Arial");
      ObjectSetInteger(0,"Texto",OBJPROP_FONTSIZE,18);
      Comentar();
     }
   else
     {
      ObjectDelete(0,"Texto");
     }

//-------------------TENDÊNCIA DE PETR4----------------------------
   CopyRates("PETR4",TimeFramePETR4,0,100,PETR4);
   CopyRates("PETR4",TimeFramePETR4_2,0,100,PETR4_2);
   PrecoDeComparacaoPetro = PETR4[TendenciaUltimosCandles - 1].close;
   Alta = (PrecoDeComparacaoPetro < PrecoPETR4);//Compara o preço x candle anteriores com o preço atual e retorna se o mercado está em alta
   if((PETR4[1].open < PETR4[1].close && PETR4[0].open < PrecoPETR4 && PETR4[0].open > PETR4[1].open) && (PETR4_2[1].open < PETR4_2[1].close && PETR4_2[0].open < PrecoPETR4))
     {
      Tendencia_de_alta = true;
      if(!AlgumaTravaIniciada)
        {
         Comment("↑↑↑ ALTA EM PETR4 ↑↑↑");
        }
     }
   else
     {
      Tendencia_de_alta = false;
      if(!AlgumaTravaIniciada)
        {
         Comment("↓↓↓ BAIXA EM PETR4 ↓↓↓");
        }
     }

   if(Trava1_Ativo1 != "" && Trava1_Ativo2 != "")
     {
      ChaveTrava1 = Ligada;
     }
   else
     {
      ChaveTrava1 = Desligada;
      AbertoParaNegociacoesTrava1 = false;
     }

   if(Trava2_Ativo1 != "" && Trava2_Ativo2 != "")
     {
      ChaveTrava2 = Ligada;
     }
   else
     {
      ChaveTrava2 = Desligada;
      AbertoParaNegociacoesTrava2 = false;
     }

   if(Trava3_Ativo1 != "" && Trava3_Ativo2 != "")
     {
      ChaveTrava3 = Ligada;
     }
   else
     {
      ChaveTrava3 = Desligada;
      AbertoParaNegociacoesTrava3 = false;
     }

   if(Trava4_Ativo1 != "" && Trava4_Ativo2 != "")
     {
      ChaveTrava4 = Ligada;
     }
   else
     {
      ChaveTrava4 = Desligada;
      AbertoParaNegociacoesTrava4 = false;
     }

   if(Trava5_Ativo1 != "" && Trava5_Ativo2 != "")
     {
      ChaveTrava5 = Ligada;
     }
   else
     {
      ChaveTrava5 = Desligada;
      AbertoParaNegociacoesTrava5 = false;
     }

   if(Trava6_Ativo1 != "" && Trava6_Ativo2 != "")
     {
      ChaveTrava6 = Ligada;
     }
   else
     {
      ChaveTrava6 = Desligada;
      AbertoParaNegociacoesTrava6 = false;
     }

   if(Trava7_Ativo1 != "" && Trava7_Ativo2 != "")
     {
      ChaveTrava7 = Ligada;
     }
   else
     {
      ChaveTrava7 = Desligada;
      AbertoParaNegociacoesTrava7 = false;
     }

   if(Trava8_Ativo1 != "" && Trava8_Ativo2 != "")
     {
      ChaveTrava8 = Ligada;
     }
   else
     {
      ChaveTrava8 = Desligada;
      AbertoParaNegociacoesTrava8 = false;
     }

   if(Trava9_Ativo1 != "" && Trava9_Ativo2 != "")
     {
      ChaveTrava9 = Ligada;
     }
   else
     {
      ChaveTrava9 = Desligada;
      AbertoParaNegociacoesTrava9 = false;
     }

   if(Trava10_Ativo1 != "" && Trava10_Ativo2 != "")
     {
      ChaveTrava10 = Ligada;
     }
   else
     {
      ChaveTrava10 = Desligada;
      AbertoParaNegociacoesTrava10 = false;
     }

   if(Trava11_Ativo1 != "" && Trava11_Ativo2 != "")
     {
      ChaveTrava11 = Ligada;
     }
   else
     {
      ChaveTrava11 = Desligada;
      AbertoParaNegociacoesTrava11 = false;
     }

   if(Trava12_Ativo1 != "" && Trava12_Ativo2 != "")
     {
      ChaveTrava12 = Ligada;
     }
   else
     {
      ChaveTrava12 = Desligada;
      AbertoParaNegociacoesTrava12 = false;
     }

   if(Trava13_Ativo1 != "" && Trava13_Ativo2 != "")
     {
      ChaveTrava13 = Ligada;
     }
   else
     {
      ChaveTrava13 = Desligada;
      AbertoParaNegociacoesTrava13 = false;
     }

   if(Trava14_Ativo1 != "" && Trava14_Ativo2 != "")
     {
      ChaveTrava14 = Ligada;
     }
   else
     {
      ChaveTrava14 = Desligada;
      AbertoParaNegociacoesTrava14 = false;
     }

   if(Trava15_Ativo1 != "" && Trava15_Ativo2 != "")
     {
      ChaveTrava15 = Ligada;
     }
   else
     {
      ChaveTrava15 = Desligada;
      AbertoParaNegociacoesTrava15 = false;
     }

   if(Trava16_Ativo1 != "" && Trava16_Ativo2 != "")
     {
      ChaveTrava16 = Ligada;
     }
   else
     {
      ChaveTrava16 = Desligada;
      AbertoParaNegociacoesTrava16 = false;
     }

   if(Trava17_Ativo1 != "" && Trava17_Ativo2 != "")
     {
      ChaveTrava17 = Ligada;
     }
   else
     {
      ChaveTrava17 = Desligada;
      AbertoParaNegociacoesTrava17 = false;
     }

   if(Trava18_Ativo1 != "" && Trava18_Ativo2 != "")
     {
      ChaveTrava18 = Ligada;
     }
   else
     {
      ChaveTrava18 = Desligada;
      AbertoParaNegociacoesTrava18 = false;
     }

   if(Trava19_Ativo1 != "" && Trava19_Ativo2 != "")
     {
      ChaveTrava19 = Ligada;
     }
   else
     {
      ChaveTrava19 = Desligada;
      AbertoParaNegociacoesTrava19 = false;
     }

   if(Trava20_Ativo1 != "" && Trava20_Ativo2 != "")
     {
      ChaveTrava20 = Ligada;
     }
   else
     {
      ChaveTrava20 = Desligada;
      AbertoParaNegociacoesTrava20 = false;
     }

   NormalizeDouble(PerdaMax,_Digits);

//Só aceita negociação se os spreads dos ativos forem menor que 0,011111
   SpreadBom_Trava1 = (((SymbolInfoDouble(Trava1_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava1_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava1_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava1_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava2 = (((SymbolInfoDouble(Trava2_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava2_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava2_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava2_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava3 = (((SymbolInfoDouble(Trava3_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava3_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava3_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava3_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava4 = (((SymbolInfoDouble(Trava4_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava4_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava4_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava4_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava5 = (((SymbolInfoDouble(Trava5_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava5_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava5_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava5_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava6 = (((SymbolInfoDouble(Trava6_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava6_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava6_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava6_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava7 = (((SymbolInfoDouble(Trava7_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava7_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava7_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava7_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava8 = (((SymbolInfoDouble(Trava8_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava8_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava8_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava8_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava9 = (((SymbolInfoDouble(Trava9_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava9_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava9_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava9_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava10 = (((SymbolInfoDouble(Trava10_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava10_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava10_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava10_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava11 = (((SymbolInfoDouble(Trava11_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava11_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava11_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava11_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava12 = (((SymbolInfoDouble(Trava12_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava12_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava12_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava12_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava13 = (((SymbolInfoDouble(Trava13_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava13_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava13_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava13_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava14 = (((SymbolInfoDouble(Trava14_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava14_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava14_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava14_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava15 = (((SymbolInfoDouble(Trava15_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava15_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava15_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava15_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava16 = (((SymbolInfoDouble(Trava16_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava16_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava16_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava16_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava17 = (((SymbolInfoDouble(Trava17_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava17_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava17_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava17_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava18 = (((SymbolInfoDouble(Trava18_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava18_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava18_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava18_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava19 = (((SymbolInfoDouble(Trava19_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava19_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava19_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava19_Ativo2,SYMBOL_BID)) < 0.011));
   SpreadBom_Trava20 = (((SymbolInfoDouble(Trava20_Ativo1,SYMBOL_ASK) - SymbolInfoDouble(Trava20_Ativo1,SYMBOL_BID)) < 0.011) && ((SymbolInfoDouble(Trava20_Ativo2,SYMBOL_ASK) - SymbolInfoDouble(Trava20_Ativo2,SYMBOL_BID)) < 0.011));

   ExcessoDeTravas = (TravasAbertas >= MaxTravasAbertas);

//                                  PROGRAMAÇÃO DAS TRAVAS

   if(DentroDoHorario() == true)//Se estiver dentro do horário de negociação programado
     {
      if(!TamanhoDoSpread(Trava1_Ativo1, Trava1_Ativo2))
        {
         ChaveTrava1 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA1 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava1 == Ligada)
        {

         double bid = Bid_Ativo1_Trava1 = SymbolInfoDouble(Trava1_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava1 = SymbolInfoDouble(Trava1_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava1 = SymbolInfoDouble(Trava1_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava1 = SymbolInfoDouble(Trava1_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava1 = true;
         Handle_Trava1_Ativo1 = iMA(Trava1_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava1_Ativo2 = iMA(Trava1_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         //--------
         SalvaBids(Trava1_Ativo1,QuantCandles, Array_Trava1_Ativo1);
         //--------
         SalvaAsks(Trava1_Ativo2,QuantCandles, Array_Trava1_Ativo2);
         //--------
         if(!CopyBuffer(Handle_Trava1_Ativo2,0,1,QuantCandles,Array_Trava1_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA1 ATV 2 ##########");
            AbertoParaNegociacoesTrava1 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava1_Ativo1,0,0,1,Ultimo_Trava1_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA1 ATV 1 ##########");
            AbertoParaNegociacoesTrava1 = false;
           }
         if(!CopyBuffer(Handle_Trava1_Ativo2,0,0,1,Ultimo_Trava1_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA1 ATV 2 ##########");
            AbertoParaNegociacoesTrava1 = false;
           }

         AtualRatioTrava1 = SymbolInfoDouble(Trava1_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava1_Ativo2,SYMBOL_ASK);//AtualRatioTrava1 = Ultimo_Trava1_A1[0] - Ultimo_Trava1_A2[0];
         MelhorRatioTrava1 = Calcular_Ratio(Array_Trava1_Ativo1, Array_Trava1_Ativo2);
         DiferencaTrava1 = (AtualRatioTrava1 - MelhorRatioTrava1)*100;
         NormalizeDouble(AtualRatioTrava1,_Digits);
         NormalizeDouble(MelhorRatioTrava1,_Digits);
         NormalizeDouble(DiferencaTrava1,_Digits);

         if(!IniciadoTrava1)//Se não aberta a posição nesses ativos
           {

            LucroTrava1 = 0;
            SpreadAtualTrava1 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava1 == 0) || (Bid_Ativo1_Trava1 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava1 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava1 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava1);
            if(Trava1 != DiferencaTrava1)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava1 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava1 && DiferencaTrava1 >= PercentualSinal && !IniciadoTrava1)
                 {
                  if(_Trava1 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava1 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 1 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava1*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava1*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava1,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 1 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava1,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava1,2));
                  DiaAberturaTrava1 = HoraAtual.day_of_year;
                  VolumeTrava1 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava1 += Ask_Ativo2_Trava1;
                  BidAcumulado_Trava1 += Bid_Ativo1_Trava1;
                  DiaFechamentoTrava1 = 0;
                  SpreadAcumuladoTrava1 += Bid_Ativo1_Trava1 - Ask_Ativo2_Trava1;

                  FatorTrava1++;
                  TRV_Trava1++;

                  if(Ch_Abertura_Trava1 == aberto)
                    {
                     AbrirPosicao(Trava1_Ativo1, Trava1_Ativo2);
                     Ch_Fechamento_Trava1 = aberto;
                     Ch_Abertura_Trava1 = fechado;
                    }

                  IniciadoTrava1 = true;
                 }
               Trava1 = DiferencaTrava1;
              }
            SpreadAberturaTrava1 = SpreadAcumuladoTrava1/FatorTrava1; //SpreadAberturaTrava1 = Bid_Ativo1_Trava1 - Ask_Ativo2_Trava1;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava1 = SpreadAberturaTrava1;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava1 = Get_Ask(Trava1_Ativo1);
            //Bid_Ativo2_Trava1 = Get_Bid(Trava1_Ativo2);
            if(FatorTrava1 <= LimiteVol && (Bid_Ativo1_Trava1 - Ask_Ativo2_Trava1) >= 0.01 + UltimoSpreadTrava1)
              {
               UltimoSpreadTrava1 = (Bid_Ativo1_Trava1 - Ask_Ativo2_Trava1);
               SpreadAtualTrava1 =  Ask_Ativo1_Trava1 - Bid_Ativo2_Trava1;
               VolumeTrava1 += Lote;
               AskAcumulado_Trava1 += Ask_Ativo2_Trava1;
               BidAcumulado_Trava1 += SymbolInfoDouble(Trava1_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava1_Ativo1, Trava1_Ativo2);
               FatorTrava1++;
               SpreadAcumuladoTrava1 += Bid_Ativo1_Trava1 - Ask_Ativo2_Trava1;
               SpreadAberturaTrava1 = SpreadAcumuladoTrava1/FatorTrava1;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA1: ",VolumeTrava1);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava1,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava1,2));
              }
            SpreadAtualTrava1 =  Ask_Ativo1_Trava1 - Bid_Ativo2_Trava1;
            LucroTrava1 = SpreadAberturaTrava1 - SpreadAtualTrava1;
            NormalizeDouble(Ask_Ativo1_Trava1,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava1,_Digits);
            NormalizeDouble(SpreadAtualTrava1,_Digits);
            NormalizeDouble(LucroTrava1,_Digits);
            CapturaMaiorDown(LucroTrava1);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava1 == 0) || (Bid_Ativo2_Trava1 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 1 OU NO ASK DO ATV 1 DA TRAVA 1 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava1  &&  LucroTrava1 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava1,Trava1_Ativo1,Ask_Ativo1_Trava1,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 1");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava1,Trava1_Ativo2,Bid_Ativo2_Trava1,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 1");
                 }
               IniciadoTrava1 = false;
               double BidMed = BidMedio(BidAcumulado_Trava1,FatorTrava1);
               double AskMed = AskMedio(AskAcumulado_Trava1,FatorTrava1);
               Print("======================================================================================================================== GAIN TRAVA 1");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava1 =0;
               VolumeTrava1 = 0;
               VerificaTrade(DiaAberturaTrava1);

               SpreadAcumuladoTrava1=0;
               DiaAberturaTrava1 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava1 = true;
               _Trava1 = aberto;
               Ch_Abertura_Trava1 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava1  &&  LucroTrava1 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava1);
               FecharTrava(VolumeTrava1,Trava1_Ativo1,Trava1_Ativo2,Bid_Ativo2_Trava1,Ask_Ativo1_Trava1);
               VolumeTrava1 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava1,FatorTrava1);
               double AskMed = AskMedio(AskAcumulado_Trava1,FatorTrava1);
               VerificaTrade(DiaAberturaTrava1);
               DiaAberturaTrava1 = 0;
               CountLoss++;
               IniciadoTrava1 = false;
               Print("======================================================================================================================== LOSS TRAVA 1");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava1 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava1=0;
               AbertoParaNegociacoesTrava1 = true;
               TRV_LossTrava1++;
               TravasAbertas+= -1;
               _Trava1 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }
      if(!TamanhoDoSpread(Trava2_Ativo1, Trava2_Ativo2))
        {
         ChaveTrava2 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA2 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava2 == Ligada)  //Se PETR4 estiver em alta
        {

         double bid = Bid_Ativo1_Trava2 = SymbolInfoDouble(Trava2_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava2 = SymbolInfoDouble(Trava2_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava2 = SymbolInfoDouble(Trava2_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava2 = SymbolInfoDouble(Trava2_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava2 = true;
         Handle_Trava2_Ativo1 = iMA(Trava2_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava2_Ativo2 = iMA(Trava2_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         SalvaBids(Trava2_Ativo1,QuantCandles, Array_Trava2_Ativo1);
         //--------
         SalvaAsks(Trava2_Ativo2,QuantCandles, Array_Trava2_Ativo2);
         //--------
         if(!CopyBuffer(Handle_Trava2_Ativo2,0,1,QuantCandles,Array_Trava2_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava2 ATV 2 ##########");
            AbertoParaNegociacoesTrava2 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava2_Ativo1,0,0,1,Ultimo_Trava2_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava2 ATV 1 ##########");
            AbertoParaNegociacoesTrava2 = false;
           }
         if(!CopyBuffer(Handle_Trava2_Ativo2,0,0,1,Ultimo_Trava2_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava2 ATV 2 ##########");
            AbertoParaNegociacoesTrava2 = false;
           }

         AtualRatioTrava2 = SymbolInfoDouble(Trava2_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava2_Ativo2,SYMBOL_ASK);//2 = Ultimo_Trava2_A1[0] - Ultimo_Trava2_A2[0];
         MelhorRatioTrava2 = Calcular_Ratio(Array_Trava2_Ativo1, Array_Trava2_Ativo2);
         DiferencaTrava2 = (AtualRatioTrava2 - MelhorRatioTrava2)*100;
         NormalizeDouble(AtualRatioTrava2,_Digits);
         NormalizeDouble(MelhorRatioTrava2,_Digits);
         NormalizeDouble(DiferencaTrava2,_Digits);

         if(!IniciadoTrava2)//Se não aberta a posição nesses ativos
           {

            LucroTrava2 = 0;
            SpreadAtualTrava2 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava2 == 0) || (Bid_Ativo1_Trava2 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 2 OU NO ASK DO ATV 2 DA TRAVA 2 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava2 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava2 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava2);
            if(Trava2 != DiferencaTrava2)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava2 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava2 && DiferencaTrava2 >= PercentualSinal && !IniciadoTrava2)
                 {
                  if(_Trava2 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava2 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 2 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava2*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava2*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava2,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 2 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava2,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava2,2));
                  DiaAberturaTrava2 = HoraAtual.day_of_year;
                  VolumeTrava2 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava2 += Ask_Ativo2_Trava2;
                  BidAcumulado_Trava2 += Bid_Ativo1_Trava2;
                  DiaFechamentoTrava2 = 0;
                  SpreadAcumuladoTrava2 += Bid_Ativo1_Trava2 - Ask_Ativo2_Trava2;
                  FatorTrava2++;
                  TRV_Trava2++;
                  if(Ch_Abertura_Trava2 == aberto)
                    {
                     AbrirPosicao(Trava2_Ativo1, Trava2_Ativo2);
                     Ch_Fechamento_Trava2 = aberto;
                     Ch_Abertura_Trava2 = fechado;
                    }

                  IniciadoTrava2 = true;
                 }
               Trava2 = DiferencaTrava2;
              }
            SpreadAberturaTrava2 = SpreadAcumuladoTrava2/FatorTrava2; //SpreadAberturaTrava2 = Bid_Ativo1_Trava2 - Ask_Ativo2_Trava2;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava2 = SpreadAberturaTrava2 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava2 = Get_Ask(Trava2_Ativo1);
            //Bid_Ativo2_Trava2 = Get_Bid(Trava2_Ativo2);
            if(FatorTrava2 <= LimiteVol && (Bid_Ativo1_Trava2 - Ask_Ativo2_Trava2) >= 0.01 + UltimoSpreadTrava2)
              {
               UltimoSpreadTrava2 = (Bid_Ativo1_Trava2 - Ask_Ativo2_Trava2);
               SpreadAtualTrava2 =  Ask_Ativo1_Trava2 - Bid_Ativo2_Trava2;
               VolumeTrava2 += Lote;
               AskAcumulado_Trava2 += Ask_Ativo2_Trava2;
               BidAcumulado_Trava2 += SymbolInfoDouble(Trava2_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava2_Ativo1, Trava2_Ativo2);
               FatorTrava2++;
               SpreadAcumuladoTrava2 += Bid_Ativo1_Trava2 - Ask_Ativo2_Trava2;
               SpreadAberturaTrava2 = SpreadAcumuladoTrava2/FatorTrava2;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA2: ",VolumeTrava2);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava2,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava2,2));

              }


            SpreadAtualTrava2 =  Ask_Ativo1_Trava2 - Bid_Ativo2_Trava2;
            LucroTrava2 = SpreadAberturaTrava2 - SpreadAtualTrava2;
            NormalizeDouble(Ask_Ativo1_Trava2,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava2,_Digits);
            NormalizeDouble(SpreadAtualTrava2,_Digits);
            NormalizeDouble(LucroTrava2,_Digits);
            CapturaMaiorDown(LucroTrava2);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava2 == 0) || (Bid_Ativo2_Trava2 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 2 OU NO ASK DO ATV 1 DA TRAVA 2 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava2  &&  LucroTrava2 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava2,Trava2_Ativo1,Ask_Ativo1_Trava2,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava2");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava2,Trava2_Ativo2,Bid_Ativo2_Trava2,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava2");
                 }
               IniciadoTrava2 = false;
               double BidMed = BidMedio(BidAcumulado_Trava2,FatorTrava2);
               double AskMed = AskMedio(AskAcumulado_Trava2,FatorTrava2);
               Print("======================================================================================================================== GAIN TRAVA 2");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava2 =0;
               VolumeTrava2 = 0;

               VerificaTrade(DiaAberturaTrava2);
               SpreadAcumuladoTrava2=0;
               DiaAberturaTrava2 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               _Trava2 = aberto;
               AbertoParaNegociacoesTrava2 = true;
               Ch_Abertura_Trava2 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava2  &&  LucroTrava2 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava2);
               FecharTrava(VolumeTrava2,Trava2_Ativo1,Trava2_Ativo2,Bid_Ativo2_Trava2,Ask_Ativo1_Trava2);
               VolumeTrava2 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava2,FatorTrava2);
               double AskMed = AskMedio(AskAcumulado_Trava2,FatorTrava2);
               VerificaTrade(DiaAberturaTrava2);
               DiaAberturaTrava2 = 0;
               CountLoss++;
               IniciadoTrava2 = false;
               Print("======================================================================================================================== LOSS TRAVA 2");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava2 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava2=0;
               AbertoParaNegociacoesTrava2 = true;
               TRV_LossTrava2++;
               TravasAbertas+= -1;
               _Trava2 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava3_Ativo1, Trava3_Ativo2))
        {
         ChaveTrava3 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA3 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava3 == Ligada)  //Se PETR4 estiver em alta
        {

         double bid = Bid_Ativo1_Trava3 = SymbolInfoDouble(Trava3_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava3 = SymbolInfoDouble(Trava3_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava3 = SymbolInfoDouble(Trava3_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava3 = SymbolInfoDouble(Trava3_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava3 = true;
         Handle_Trava3_Ativo1 = iMA(Trava3_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava3_Ativo2 = iMA(Trava3_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava3_Ativo1,QuantCandles, Array_Trava3_Ativo1);
         //------
         //--------
         SalvaAsks(Trava3_Ativo2,QuantCandles, Array_Trava3_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava3_Ativo2,0,1,QuantCandles,Array_Trava3_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava3 ATV 2 ##########");
            AbertoParaNegociacoesTrava3 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava3_Ativo1,0,0,1,Ultimo_Trava3_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava3 ATV 1 ##########");
            AbertoParaNegociacoesTrava3 = false;
           }
         if(!CopyBuffer(Handle_Trava3_Ativo2,0,0,1,Ultimo_Trava3_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava3 ATV 2 ##########");
            AbertoParaNegociacoesTrava3 = false;
           }

         AtualRatioTrava3 = SymbolInfoDouble(Trava3_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava3_Ativo2,SYMBOL_ASK);//3 = Ultimo_Trava3_A1[0] - Ultimo_Trava3_A2[0];
         MelhorRatioTrava3 = Calcular_Ratio(Array_Trava3_Ativo1, Array_Trava3_Ativo2);
         DiferencaTrava3 = (AtualRatioTrava3 - MelhorRatioTrava3)*100;
         NormalizeDouble(AtualRatioTrava3,_Digits);
         NormalizeDouble(MelhorRatioTrava3,_Digits);
         NormalizeDouble(DiferencaTrava3,_Digits);

         if(!IniciadoTrava3)//Se não aberta a posição nesses ativos
           {

            LucroTrava3 = 0;
            SpreadAtualTrava3 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava3 == 0) || (Bid_Ativo1_Trava3 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 3 OU NO ASK DO ATV 2 DA TRAVA 3 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava3 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava3 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava3);
            if(Trava3 != DiferencaTrava3)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava3 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava3 && DiferencaTrava3 >= PercentualSinal && !IniciadoTrava3)
                 {
                  if(_Trava3 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava3 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 3 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava3*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava3*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava3,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 3 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava3,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava3,2));
                  DiaAberturaTrava3 = HoraAtual.day_of_year;
                  VolumeTrava3 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava3 += Ask_Ativo2_Trava3;
                  BidAcumulado_Trava3 += Bid_Ativo1_Trava3;
                  DiaFechamentoTrava3 = 0;
                  SpreadAcumuladoTrava3 += Bid_Ativo1_Trava3 - Ask_Ativo2_Trava3;
                  FatorTrava3++;
                  TRV_Trava3++;

                  if(Ch_Abertura_Trava3 == aberto)
                    {
                     AbrirPosicao(Trava3_Ativo1, Trava3_Ativo2);
                     Ch_Fechamento_Trava3 = aberto;
                     Ch_Abertura_Trava3 = fechado;
                    }

                  IniciadoTrava3 = true;
                 }
               Trava3 = DiferencaTrava3;
              }
            SpreadAberturaTrava3 = SpreadAcumuladoTrava3/FatorTrava3; //SpreadAberturaTrava3 = Bid_Ativo1_Trava3 - Ask_Ativo2_Trava3;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava3 = SpreadAberturaTrava3 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava3 = Get_Ask(Trava3_Ativo1);
            //Bid_Ativo2_Trava3 = Get_Bid(Trava3_Ativo2);
            if(FatorTrava3 <= LimiteVol && (Bid_Ativo1_Trava3 - Ask_Ativo2_Trava3) >= 0.01 + UltimoSpreadTrava3)
              {
               UltimoSpreadTrava3 = (Bid_Ativo1_Trava3 - Ask_Ativo2_Trava3);
               SpreadAtualTrava3 =  Ask_Ativo1_Trava3 - Bid_Ativo2_Trava3;
               VolumeTrava3 += Lote;
               AskAcumulado_Trava3 += Ask_Ativo2_Trava3;
               BidAcumulado_Trava3 += SymbolInfoDouble(Trava3_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava3_Ativo1, Trava3_Ativo2);
               FatorTrava3++;
               SpreadAcumuladoTrava3 += Bid_Ativo1_Trava3 - Ask_Ativo2_Trava3;
               SpreadAberturaTrava3 = SpreadAcumuladoTrava3/FatorTrava3;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA3: ",VolumeTrava3);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava3,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava3,2));

              }


            SpreadAtualTrava3 =  Ask_Ativo1_Trava3 - Bid_Ativo2_Trava3;
            LucroTrava3 = SpreadAberturaTrava3 - SpreadAtualTrava3;
            NormalizeDouble(Ask_Ativo1_Trava3,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava3,_Digits);
            NormalizeDouble(SpreadAtualTrava3,_Digits);
            NormalizeDouble(LucroTrava3,_Digits);
            CapturaMaiorDown(LucroTrava3);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava3 == 0) || (Bid_Ativo2_Trava3 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 3 OU NO ASK DO ATV 1 DA TRAVA 3 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava3  &&  LucroTrava3 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava3,Trava3_Ativo1,Ask_Ativo1_Trava3,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava3");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava3,Trava3_Ativo2,Bid_Ativo2_Trava3,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava3");
                 }
               IniciadoTrava3 = false;
               double BidMed = BidMedio(BidAcumulado_Trava3,FatorTrava3);
               double AskMed = AskMedio(AskAcumulado_Trava3,FatorTrava3);
               Print("======================================================================================================================== GAIN TRAVA 3");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava3 =0;
               VolumeTrava3 = 0;

               VerificaTrade(DiaAberturaTrava3);
               SpreadAcumuladoTrava3=0;
               DiaAberturaTrava3 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava3 = true;
               _Trava3 = aberto;
               Ch_Abertura_Trava3 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava3  &&  LucroTrava3 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava3);
               FecharTrava(VolumeTrava3,Trava3_Ativo1,Trava3_Ativo2,Bid_Ativo2_Trava3,Ask_Ativo1_Trava3);
               VolumeTrava3 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava3,FatorTrava3);
               double AskMed = AskMedio(AskAcumulado_Trava3,FatorTrava3);
               VerificaTrade(DiaAberturaTrava3);
               DiaAberturaTrava3 = 0;
               CountLoss++;
               IniciadoTrava3 = false;
               Print("======================================================================================================================== LOSS TRAVA 3");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava3 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava3=0;
               AbertoParaNegociacoesTrava3 = true;
               TRV_LossTrava3++;
               TravasAbertas+= -1;
               _Trava3 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava4_Ativo1, Trava4_Ativo2))
        {
         ChaveTrava4 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA4 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava4 == Ligada)  //Se PETR4 estiver em alta
        {

         double bid = Bid_Ativo1_Trava4 = SymbolInfoDouble(Trava4_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava4 = SymbolInfoDouble(Trava4_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava4 = SymbolInfoDouble(Trava4_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava4 = SymbolInfoDouble(Trava4_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava4 = true;
         Handle_Trava4_Ativo1 = iMA(Trava4_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava4_Ativo2 = iMA(Trava4_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava4_Ativo1,QuantCandles, Array_Trava4_Ativo1);
         //------
         //--------
         SalvaAsks(Trava4_Ativo2,QuantCandles, Array_Trava4_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava4_Ativo2,0,1,QuantCandles,Array_Trava4_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava4 ATV 2 ##########");
            AbertoParaNegociacoesTrava4 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava4_Ativo1,0,0,1,Ultimo_Trava4_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava4 ATV 1 ##########");
            AbertoParaNegociacoesTrava4 = false;
           }
         if(!CopyBuffer(Handle_Trava4_Ativo2,0,0,1,Ultimo_Trava4_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava4 ATV 2 ##########");
            AbertoParaNegociacoesTrava4 = false;
           }

         AtualRatioTrava4 = SymbolInfoDouble(Trava4_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava4_Ativo2,SYMBOL_ASK);//4 = Ultimo_Trava4_A1[0] - Ultimo_Trava4_A2[0];
         MelhorRatioTrava4 = Calcular_Ratio(Array_Trava4_Ativo1, Array_Trava4_Ativo2);
         DiferencaTrava4 = (AtualRatioTrava4 - MelhorRatioTrava4)*100;
         NormalizeDouble(AtualRatioTrava4,_Digits);
         NormalizeDouble(MelhorRatioTrava4,_Digits);
         NormalizeDouble(DiferencaTrava4,_Digits);

         if(!IniciadoTrava4)//Se não aberta a posição nesses ativos
           {

            LucroTrava4 = 0;
            SpreadAtualTrava4 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava4 == 0) || (Bid_Ativo1_Trava4 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 4 OU NO ASK DO ATV 2 DA TRAVA 4 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava4 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava4 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava4);
            if(Trava4 != DiferencaTrava4)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava4 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava4 && DiferencaTrava4 >= PercentualSinal && !IniciadoTrava4)
                 {
                  if(_Trava4 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava4 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 4 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava4*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava4*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava4,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 4 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava4,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava4,2));
                  DiaAberturaTrava4 = HoraAtual.day_of_year;
                  VolumeTrava4 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava4 += Ask_Ativo2_Trava4;
                  BidAcumulado_Trava4 += Bid_Ativo1_Trava4;
                  DiaFechamentoTrava4= 0;
                  SpreadAcumuladoTrava4 += Bid_Ativo1_Trava4 - Ask_Ativo2_Trava4;
                  FatorTrava4++;
                  TRV_Trava4++;

                  if(Ch_Abertura_Trava4 == aberto)
                    {
                     AbrirPosicao(Trava4_Ativo1, Trava4_Ativo2);
                     Ch_Fechamento_Trava4 = aberto;
                     Ch_Abertura_Trava4 = fechado;
                    }

                  IniciadoTrava4 = true;
                 }
               Trava4 = DiferencaTrava4;
              }
            SpreadAberturaTrava4    = SpreadAcumuladoTrava4     /FatorTrava4    ; //SpreadAberturaTrava4 = Bid_Ativo1_Trava4 - Ask_Ativo2_Trava4;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava4 = SpreadAberturaTrava4 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava4 = Get_Ask(Trava4_Ativo1);
            //Bid_Ativo2_Trava4 = Get_Bid(Trava4_Ativo2);
            if(FatorTrava4 <= LimiteVol && (Bid_Ativo1_Trava4 - Ask_Ativo2_Trava4) >= 0.01 + UltimoSpreadTrava4)
              {
               UltimoSpreadTrava4 = (Bid_Ativo1_Trava4 - Ask_Ativo2_Trava4);
               SpreadAtualTrava4 =  Ask_Ativo1_Trava4 - Bid_Ativo2_Trava4;
               VolumeTrava4 += Lote;
               AskAcumulado_Trava4 += Ask_Ativo2_Trava4;
               BidAcumulado_Trava4 += SymbolInfoDouble(Trava4_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava4_Ativo1, Trava4_Ativo2);
               FatorTrava4++;
               SpreadAcumuladoTrava4 += Bid_Ativo1_Trava4 - Ask_Ativo2_Trava4;
               SpreadAberturaTrava4 = SpreadAcumuladoTrava4/FatorTrava4;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA4: ",VolumeTrava4);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava4,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava4,2));

              }


            SpreadAtualTrava4 =  Ask_Ativo1_Trava4 - Bid_Ativo2_Trava4;
            LucroTrava4 = SpreadAberturaTrava4 - SpreadAtualTrava4;
            NormalizeDouble(Ask_Ativo1_Trava4,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava4,_Digits);
            NormalizeDouble(SpreadAtualTrava4,_Digits);
            NormalizeDouble(LucroTrava4,_Digits);
            CapturaMaiorDown(LucroTrava4);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava4 == 0) || (Bid_Ativo2_Trava4 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 4 OU NO ASK DO ATV 1 DA TRAVA 4 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava4  &&  LucroTrava4 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava4,Trava4_Ativo1,Ask_Ativo1_Trava4,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava4");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava4,Trava4_Ativo2,Bid_Ativo2_Trava4,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava4");
                 }
               IniciadoTrava4 = false;
               double BidMed = BidMedio(BidAcumulado_Trava4,FatorTrava4);
               double AskMed = AskMedio(AskAcumulado_Trava4,FatorTrava4);
               Print("======================================================================================================================== GAIN TRAVA 4");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava4 =0;
               VolumeTrava4 = 0;

               VerificaTrade(DiaAberturaTrava4);
               SpreadAcumuladoTrava4=0;
               DiaAberturaTrava4 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava4 = true;
               _Trava4 = aberto;
               Ch_Abertura_Trava4 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava4  &&  LucroTrava4 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava4);
               FecharTrava(VolumeTrava4,Trava4_Ativo1,Trava4_Ativo2,Bid_Ativo2_Trava4,Ask_Ativo1_Trava4);
               VolumeTrava4 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava4,FatorTrava4);
               double AskMed = AskMedio(AskAcumulado_Trava4,FatorTrava4);
               VerificaTrade(DiaAberturaTrava4);
               DiaAberturaTrava4 = 0;
               CountLoss++;
               IniciadoTrava4 = false;
               Print("======================================================================================================================== LOSS TRAVA 4");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava4 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava4=0;
               AbertoParaNegociacoesTrava4 = true;
               TRV_LossTrava4++;
               TravasAbertas+= -1;
               _Trava4 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }
      if(!TamanhoDoSpread(Trava5_Ativo1, Trava5_Ativo2))
        {
         ChaveTrava5 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA5 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava5 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava5 = SymbolInfoDouble(Trava5_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava5 = SymbolInfoDouble(Trava5_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava5 = SymbolInfoDouble(Trava5_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava5 = SymbolInfoDouble(Trava5_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava5 = true;
         Handle_Trava5_Ativo1 = iMA(Trava5_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava5_Ativo2 = iMA(Trava5_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava5_Ativo1,QuantCandles, Array_Trava5_Ativo1);
         //------
         //--------
         SalvaAsks(Trava5_Ativo2,QuantCandles, Array_Trava5_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava5_Ativo2,0,1,QuantCandles,Array_Trava5_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava5 ATV 2 ##########");
            AbertoParaNegociacoesTrava5 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava5_Ativo1,0,0,1,Ultimo_Trava5_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava5 ATV 1 ##########");
            AbertoParaNegociacoesTrava5 = false;
           }
         if(!CopyBuffer(Handle_Trava5_Ativo2,0,0,1,Ultimo_Trava5_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava5 ATV 2 ##########");
            AbertoParaNegociacoesTrava5 = false;
           }

         AtualRatioTrava5 = SymbolInfoDouble(Trava5_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava5_Ativo2,SYMBOL_ASK);//5 = Ultimo_Trava5_A1[0] - Ultimo_Trava5_A2[0];
         MelhorRatioTrava5 = Calcular_Ratio(Array_Trava5_Ativo1, Array_Trava5_Ativo2);
         DiferencaTrava5 = (AtualRatioTrava5 - MelhorRatioTrava5)*100;
         NormalizeDouble(AtualRatioTrava5,_Digits);
         NormalizeDouble(MelhorRatioTrava5,_Digits);
         NormalizeDouble(DiferencaTrava5,_Digits);

         if(!IniciadoTrava5)//Se não aberta a posição nesses ativos
           {

            LucroTrava5 = 0;
            SpreadAtualTrava5 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava5 == 0) || (Bid_Ativo1_Trava5 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 5 OU NO ASK DO ATV 2 DA TRAVA 5 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava5 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava5 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava5);
            if(Trava5 != DiferencaTrava5)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava5 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava5 && DiferencaTrava5 >= PercentualSinal && !IniciadoTrava5)
                 {
                  if(_Trava5 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava5 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 5 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava5*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava5*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava5,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 5 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava5,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava5,2));
                  DiaAberturaTrava5 = HoraAtual.day_of_year;
                  VolumeTrava5 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava5 += Ask_Ativo2_Trava5;
                  BidAcumulado_Trava5 += Bid_Ativo1_Trava5;
                  DiaFechamentoTrava5 = 0;
                  SpreadAcumuladoTrava5 += Bid_Ativo1_Trava5 - Ask_Ativo2_Trava5;
                  FatorTrava5++;
                  TRV_Trava5++;

                  if(Ch_Abertura_Trava5 == aberto)
                    {
                     AbrirPosicao(Trava5_Ativo1, Trava5_Ativo2);
                     Ch_Fechamento_Trava5  = aberto;
                     Ch_Abertura_Trava5 = fechado;
                    }


                  IniciadoTrava5 = true;
                 }
               Trava5 = DiferencaTrava5;
              }
            SpreadAberturaTrava5    = SpreadAcumuladoTrava5     /FatorTrava5   ; //SpreadAberturaTrava5 = Bid_Ativo1_Trava5 - Ask_Ativo2_Trava5;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava5 = SpreadAberturaTrava5 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava5 = Get_Ask(Trava5_Ativo1);
            //Bid_Ativo2_Trava5 = Get_Bid(Trava5_Ativo2);
            if(FatorTrava5 <= LimiteVol && (Bid_Ativo1_Trava5 - Ask_Ativo2_Trava5) >= 0.01 + UltimoSpreadTrava5)
              {
               UltimoSpreadTrava5 = (Bid_Ativo1_Trava5 - Ask_Ativo2_Trava5);
               SpreadAtualTrava5 =  Ask_Ativo1_Trava5 - Bid_Ativo2_Trava5;
               VolumeTrava5 += Lote;
               AskAcumulado_Trava5 += Ask_Ativo2_Trava5;
               BidAcumulado_Trava5 += SymbolInfoDouble(Trava5_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava5_Ativo1, Trava5_Ativo2);
               FatorTrava5++;
               SpreadAcumuladoTrava5 += Bid_Ativo1_Trava5 - Ask_Ativo2_Trava5;
               SpreadAberturaTrava5 = SpreadAcumuladoTrava5/FatorTrava5;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA5: ",VolumeTrava5);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava5,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava5,2));

              }


            SpreadAtualTrava5 =  Ask_Ativo1_Trava5 - Bid_Ativo2_Trava5;
            LucroTrava5 = SpreadAberturaTrava5 - SpreadAtualTrava5;
            NormalizeDouble(Ask_Ativo1_Trava5,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava5,_Digits);
            NormalizeDouble(SpreadAtualTrava5,_Digits);
            NormalizeDouble(LucroTrava5,_Digits);
            CapturaMaiorDown(LucroTrava5);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava5 == 0) || (Bid_Ativo2_Trava5 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 5 OU NO ASK DO ATV 1 DA TRAVA 5 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava5  &&  LucroTrava5 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava5,Trava5_Ativo1,Ask_Ativo1_Trava5,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava5");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava5,Trava5_Ativo2,Bid_Ativo2_Trava5,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava5");
                 }
               IniciadoTrava5 = false;
               double BidMed = BidMedio(BidAcumulado_Trava5,FatorTrava5);
               double AskMed = AskMedio(AskAcumulado_Trava5,FatorTrava5);
               Print("======================================================================================================================== GAIN TRAVA 5");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava5 =0;
               VolumeTrava5 = 0;

               VerificaTrade(DiaAberturaTrava5);
               SpreadAcumuladoTrava5=0;
               DiaAberturaTrava5 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava5 = true;
               _Trava5 = aberto;
               Ch_Abertura_Trava5 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava5  &&  LucroTrava5 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava5);
               FecharTrava(VolumeTrava5,Trava5_Ativo1,Trava5_Ativo2,Bid_Ativo2_Trava5,Ask_Ativo1_Trava5);
               VolumeTrava5 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava5,FatorTrava5);
               double AskMed = AskMedio(AskAcumulado_Trava5,FatorTrava5);
               VerificaTrade(DiaAberturaTrava5);
               DiaAberturaTrava5 = 0;
               CountLoss++;
               IniciadoTrava5 = false;
               Print("======================================================================================================================== LOSS TRAVA 5");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava5 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava5=0;
               AbertoParaNegociacoesTrava5 = true;
               TRV_LossTrava5++;
               TravasAbertas+= -1;
               _Trava5 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava6_Ativo1, Trava6_Ativo2))
        {
         ChaveTrava6 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA6 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava6 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava6 = SymbolInfoDouble(Trava6_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava6 = SymbolInfoDouble(Trava6_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava6 = SymbolInfoDouble(Trava6_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava6 = SymbolInfoDouble(Trava6_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava6 = true;
         Handle_Trava6_Ativo1 = iMA(Trava6_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava6_Ativo2 = iMA(Trava6_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava6_Ativo1,QuantCandles, Array_Trava6_Ativo1);
         //------
         //--------
         SalvaAsks(Trava6_Ativo2,QuantCandles, Array_Trava6_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava6_Ativo2,0,1,QuantCandles,Array_Trava6_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava6 ATV 2 ##########");
            AbertoParaNegociacoesTrava6 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava6_Ativo1,0,0,1,Ultimo_Trava6_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava6 ATV 1 ##########");
            AbertoParaNegociacoesTrava6 = false;
           }
         if(!CopyBuffer(Handle_Trava6_Ativo2,0,0,1,Ultimo_Trava6_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava6 ATV 2 ##########");
            AbertoParaNegociacoesTrava6 = false;
           }

         AtualRatioTrava6 = SymbolInfoDouble(Trava6_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava6_Ativo2,SYMBOL_ASK);//6 = Ultimo_Trava6_A1[0] - Ultimo_Trava6_A2[0];
         MelhorRatioTrava6 = Calcular_Ratio(Array_Trava6_Ativo1, Array_Trava6_Ativo2);
         DiferencaTrava6 = (AtualRatioTrava6 - MelhorRatioTrava6)*100;
         NormalizeDouble(AtualRatioTrava6,_Digits);
         NormalizeDouble(MelhorRatioTrava6,_Digits);
         NormalizeDouble(DiferencaTrava6,_Digits);

         if(!IniciadoTrava6)//Se não aberta a posição nesses ativos
           {

            LucroTrava6 = 0;
            SpreadAtualTrava6 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava6 == 0) || (Bid_Ativo1_Trava6 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava6 OU NO ASK DO ATV 2 DA Trava6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava6 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava6 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava6);
            if(Trava6 != DiferencaTrava6)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava6 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava6 && DiferencaTrava6 >= PercentualSinal && !IniciadoTrava6)
                 {
                  if(_Trava6 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava6 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava6 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava6*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava6*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava6,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 6 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava6,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava6,2));
                  DiaAberturaTrava6 = HoraAtual.day_of_year;
                  VolumeTrava6 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava6 += Ask_Ativo2_Trava6;
                  BidAcumulado_Trava6 += Bid_Ativo1_Trava6;
                  DiaFechamentoTrava6 = 0;
                  SpreadAcumuladoTrava6 += Bid_Ativo1_Trava6 - Ask_Ativo2_Trava6;
                  FatorTrava6++;
                  TRV_Trava6++;

                  if(Ch_Abertura_Trava6 == aberto)
                    {
                     AbrirPosicao(Trava6_Ativo1, Trava6_Ativo2);
                     Ch_Fechamento_Trava6  = aberto;
                     Ch_Abertura_Trava6 = fechado;
                    }


                  IniciadoTrava6 = true;
                 }
               Trava6 = DiferencaTrava6;
              }
            SpreadAberturaTrava6    = SpreadAcumuladoTrava6     /FatorTrava6   ; //SpreadAberturaTrava6 = Bid_Ativo1_Trava6 - Ask_Ativo2_Trava6;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava6 = SpreadAberturaTrava6 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava6 = Get_Ask(Trava6_Ativo1);
            //Bid_Ativo2_Trava6 = Get_Bid(Trava6_Ativo2);
            if(FatorTrava6 <= LimiteVol && (Bid_Ativo1_Trava6 - Ask_Ativo2_Trava6) >= 0.01 + UltimoSpreadTrava6)
              {
               UltimoSpreadTrava6 = (Bid_Ativo1_Trava6 - Ask_Ativo2_Trava6);
               SpreadAtualTrava6 =  Ask_Ativo1_Trava6 - Bid_Ativo2_Trava6;
               VolumeTrava6 += Lote;
               AskAcumulado_Trava6 += Ask_Ativo2_Trava6;
               BidAcumulado_Trava6 += SymbolInfoDouble(Trava6_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava6_Ativo1, Trava6_Ativo2);
               FatorTrava6++;
               SpreadAcumuladoTrava6 += Bid_Ativo1_Trava6 - Ask_Ativo2_Trava6;
               SpreadAberturaTrava6 = SpreadAcumuladoTrava6/FatorTrava6;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA6: ",VolumeTrava6);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava6,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava6,2));

              }


            SpreadAtualTrava6 =  Ask_Ativo1_Trava6 - Bid_Ativo2_Trava6;
            LucroTrava6 = SpreadAberturaTrava6 - SpreadAtualTrava6;
            NormalizeDouble(Ask_Ativo1_Trava6,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava6,_Digits);
            NormalizeDouble(SpreadAtualTrava6,_Digits);
            NormalizeDouble(LucroTrava6,_Digits);
            CapturaMaiorDown(LucroTrava6);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava6 == 0) || (Bid_Ativo2_Trava6 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 6 OU NO ASK DO ATV 1 DA TRAVA 6 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava6  &&  LucroTrava6 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava6,Trava6_Ativo1,Ask_Ativo1_Trava6,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava6");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava6,Trava6_Ativo2,Bid_Ativo2_Trava6,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava6");
                 }
               IniciadoTrava6 = false;
               double BidMed = BidMedio(BidAcumulado_Trava6,FatorTrava6);
               double AskMed = AskMedio(AskAcumulado_Trava6,FatorTrava6);
               Print("======================================================================================================================== GAIN TRAVA 6");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava6 =0;
               VolumeTrava6 = 0;

               VerificaTrade(DiaAberturaTrava6);
               SpreadAcumuladoTrava6=0;
               DiaAberturaTrava6 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava6 = true;
               _Trava6 = aberto;
               Ch_Abertura_Trava6 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava6  &&  LucroTrava6 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava6);
               FecharTrava(VolumeTrava6,Trava6_Ativo1,Trava6_Ativo2,Bid_Ativo2_Trava6,Ask_Ativo1_Trava6);
               VolumeTrava6 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava6,FatorTrava6);
               double AskMed = AskMedio(AskAcumulado_Trava6,FatorTrava6);
               VerificaTrade(DiaAberturaTrava6);
               DiaAberturaTrava6 = 0;
               CountLoss++;
               IniciadoTrava6 = false;
               Print("======================================================================================================================== LOSS TRAVA 6");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava6 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava6=0;
               AbertoParaNegociacoesTrava6 = true;
               TRV_LossTrava6++;
               TravasAbertas+= -1;
               _Trava6 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava7_Ativo1, Trava7_Ativo2))
        {
         ChaveTrava7 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA7 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava7 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava7 = SymbolInfoDouble(Trava7_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava7 = SymbolInfoDouble(Trava7_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava7 = SymbolInfoDouble(Trava7_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava7 = SymbolInfoDouble(Trava7_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava7 = true;
         Handle_Trava7_Ativo1 = iMA(Trava7_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava7_Ativo2 = iMA(Trava7_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava7_Ativo1,QuantCandles, Array_Trava7_Ativo1);
         //------
         //--------
         SalvaAsks(Trava7_Ativo2,QuantCandles, Array_Trava7_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava7_Ativo2,0,1,QuantCandles,Array_Trava7_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava7 ATV 2 ##########");
            AbertoParaNegociacoesTrava7 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava7_Ativo1,0,0,1,Ultimo_Trava7_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava7 ATV 1 ##########");
            AbertoParaNegociacoesTrava7 = false;
           }
         if(!CopyBuffer(Handle_Trava7_Ativo2,0,0,1,Ultimo_Trava7_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava7 ATV 2 ##########");
            AbertoParaNegociacoesTrava7 = false;
           }

         AtualRatioTrava7 = SymbolInfoDouble(Trava7_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava7_Ativo2,SYMBOL_ASK);//7 = Ultimo_Trava7_A1[0] - Ultimo_Trava7_A2[0];
         MelhorRatioTrava7 = Calcular_Ratio(Array_Trava7_Ativo1, Array_Trava7_Ativo2);
         DiferencaTrava7 = (AtualRatioTrava7 - MelhorRatioTrava7)*100;
         NormalizeDouble(AtualRatioTrava7,_Digits);
         NormalizeDouble(MelhorRatioTrava7,_Digits);
         NormalizeDouble(DiferencaTrava7,_Digits);

         if(!IniciadoTrava7)//Se não aberta a posição nesses ativos
           {

            LucroTrava7 = 0;
            SpreadAtualTrava7 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava7 == 0) || (Bid_Ativo1_Trava7 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava7 OU NO ASK DO ATV 2 DA Trava7 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava7 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava7 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava7);
            if(Trava7 != DiferencaTrava7)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava7 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava7 && DiferencaTrava7 >= PercentualSinal && !IniciadoTrava7)
                 {
                  if(_Trava7 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava7 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava7 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava7*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava7*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava7,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 7 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava7,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava7,2));
                  DiaAberturaTrava7 = HoraAtual.day_of_year;
                  VolumeTrava7 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava7 += Ask_Ativo2_Trava7;
                  BidAcumulado_Trava7 += Bid_Ativo1_Trava7;
                  DiaFechamentoTrava7 = 0;
                  SpreadAcumuladoTrava7 += Bid_Ativo1_Trava7 - Ask_Ativo2_Trava7;
                  FatorTrava7++;
                  TRV_Trava7++;

                  if(Ch_Abertura_Trava7 == aberto)
                    {
                     AbrirPosicao(Trava7_Ativo1, Trava7_Ativo2);
                     Ch_Fechamento_Trava7  = aberto;
                     Ch_Abertura_Trava7 = fechado;
                    }


                  IniciadoTrava7 = true;
                 }
               Trava7 = DiferencaTrava7;
              }
            SpreadAberturaTrava7    = SpreadAcumuladoTrava7     /FatorTrava7   ; //SpreadAberturaTrava7 = Bid_Ativo1_Trava7 - Ask_Ativo2_Trava7;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava7 = SpreadAberturaTrava7 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava7 = Get_Ask(Trava7_Ativo1);
            //Bid_Ativo2_Trava7 = Get_Bid(Trava7_Ativo2);
            if(FatorTrava7 <= LimiteVol && (Bid_Ativo1_Trava7 - Ask_Ativo2_Trava7) >= 0.01 + UltimoSpreadTrava7)
              {
               UltimoSpreadTrava7 = (Bid_Ativo1_Trava7 - Ask_Ativo2_Trava7);
               SpreadAtualTrava7 =  Ask_Ativo1_Trava7 - Bid_Ativo2_Trava7;
               VolumeTrava7 += Lote;
               AskAcumulado_Trava7 += Ask_Ativo2_Trava7;
               BidAcumulado_Trava7 += SymbolInfoDouble(Trava7_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava7_Ativo1, Trava7_Ativo2);
               FatorTrava7++;
               SpreadAcumuladoTrava7 += Bid_Ativo1_Trava7 - Ask_Ativo2_Trava7;
               SpreadAberturaTrava7 = SpreadAcumuladoTrava7/FatorTrava7;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA7: ",VolumeTrava7);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava7,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava7,2));

              }


            SpreadAtualTrava7 =  Ask_Ativo1_Trava7 - Bid_Ativo2_Trava7;
            LucroTrava7 = SpreadAberturaTrava7 - SpreadAtualTrava7;
            NormalizeDouble(Ask_Ativo1_Trava7,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava7,_Digits);
            NormalizeDouble(SpreadAtualTrava7,_Digits);
            NormalizeDouble(LucroTrava7,_Digits);
            CapturaMaiorDown(LucroTrava7);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava7 == 0) || (Bid_Ativo2_Trava7 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 7 OU NO ASK DO ATV 1 DA TRAVA 7 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava7  &&  LucroTrava7 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava7,Trava7_Ativo1,Ask_Ativo1_Trava7,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava7");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava7,Trava7_Ativo2,Bid_Ativo2_Trava7,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava7");
                 }
               IniciadoTrava7 = false;
               double BidMed = BidMedio(BidAcumulado_Trava7,FatorTrava7);
               double AskMed = AskMedio(AskAcumulado_Trava7,FatorTrava7);
               Print("======================================================================================================================== GAIN TRAVA 7");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava7 =0;
               VolumeTrava7 = 0;

               VerificaTrade(DiaAberturaTrava7);
               SpreadAcumuladoTrava7=0;
               DiaAberturaTrava7 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava7 = true;
               _Trava7 = aberto;
               Ch_Abertura_Trava7 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava7  &&  LucroTrava7 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava7);
               FecharTrava(VolumeTrava7,Trava7_Ativo1,Trava7_Ativo2,Bid_Ativo2_Trava7,Ask_Ativo1_Trava7);
               VolumeTrava7 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava7,FatorTrava7);
               double AskMed = AskMedio(AskAcumulado_Trava7,FatorTrava7);
               VerificaTrade(DiaAberturaTrava7);
               DiaAberturaTrava7 = 0;
               CountLoss++;
               IniciadoTrava7 = false;
               Print("======================================================================================================================== LOSS TRAVA 7");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava7 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava7=0;
               AbertoParaNegociacoesTrava7 = true;
               TRV_LossTrava7++;
               TravasAbertas+= -1;
               _Trava7 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava8_Ativo1, Trava8_Ativo2))
        {
         ChaveTrava8 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA8 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava8 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava8 = SymbolInfoDouble(Trava8_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava8 = SymbolInfoDouble(Trava8_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava8 = SymbolInfoDouble(Trava8_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava8 = SymbolInfoDouble(Trava8_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava8 = true;
         Handle_Trava8_Ativo1 = iMA(Trava8_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava8_Ativo2 = iMA(Trava8_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava8_Ativo1,QuantCandles, Array_Trava8_Ativo1);
         //------
         //--------
         SalvaAsks(Trava8_Ativo2,QuantCandles, Array_Trava8_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava8_Ativo2,0,1,QuantCandles,Array_Trava8_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava8 ATV 2 ##########");
            AbertoParaNegociacoesTrava8 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava8_Ativo1,0,0,1,Ultimo_Trava8_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava8 ATV 1 ##########");
            AbertoParaNegociacoesTrava8 = false;
           }
         if(!CopyBuffer(Handle_Trava8_Ativo2,0,0,1,Ultimo_Trava8_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava8 ATV 2 ##########");
            AbertoParaNegociacoesTrava8 = false;
           }

         AtualRatioTrava8 = SymbolInfoDouble(Trava8_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava8_Ativo2,SYMBOL_ASK);//8 = Ultimo_Trava8_A1[0] - Ultimo_Trava8_A2[0];
         MelhorRatioTrava8 = Calcular_Ratio(Array_Trava8_Ativo1, Array_Trava8_Ativo2);
         DiferencaTrava8 = (AtualRatioTrava8 - MelhorRatioTrava8)*100;
         NormalizeDouble(AtualRatioTrava8,_Digits);
         NormalizeDouble(MelhorRatioTrava8,_Digits);
         NormalizeDouble(DiferencaTrava8,_Digits);

         if(!IniciadoTrava8)//Se não aberta a posição nesses ativos
           {

            LucroTrava8 = 0;
            SpreadAtualTrava8 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava8 == 0) || (Bid_Ativo1_Trava8 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava8 OU NO ASK DO ATV 2 DA Trava8 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava8 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava8 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava8);
            if(Trava8 != DiferencaTrava8)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava8 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava8 && DiferencaTrava8 >= PercentualSinal && !IniciadoTrava8)
                 {
                  if(_Trava8 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava8 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava8 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava8*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava8*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava8,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 8 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava8,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava8,2));
                  DiaAberturaTrava8 = HoraAtual.day_of_year;
                  VolumeTrava8 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava8 += Ask_Ativo2_Trava8;
                  BidAcumulado_Trava8 += Bid_Ativo1_Trava8;
                  DiaFechamentoTrava8 = 0;
                  SpreadAcumuladoTrava8 += Bid_Ativo1_Trava8 - Ask_Ativo2_Trava8;
                  FatorTrava8++;
                  TRV_Trava8++;

                  if(Ch_Abertura_Trava8 == aberto)
                    {
                     AbrirPosicao(Trava8_Ativo1, Trava8_Ativo2);
                     Ch_Fechamento_Trava8  = aberto;
                     Ch_Abertura_Trava8 = fechado;
                    }


                  IniciadoTrava8 = true;
                 }
               Trava8 = DiferencaTrava8;
              }
            SpreadAberturaTrava8 = Bid_Ativo1_Trava8 - Ask_Ativo2_Trava8;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava8 = SpreadAberturaTrava8 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava8 = Get_Ask(Trava8_Ativo1);
            //Bid_Ativo2_Trava8 = Get_Bid(Trava8_Ativo2);
            if(FatorTrava8 <= LimiteVol && (Bid_Ativo1_Trava8 - Ask_Ativo2_Trava8) >= 0.01 + UltimoSpreadTrava8)
              {
               UltimoSpreadTrava8 = (Bid_Ativo1_Trava8 - Ask_Ativo2_Trava8);
               SpreadAtualTrava8 =  Ask_Ativo1_Trava8 - Bid_Ativo2_Trava8;
               VolumeTrava8 += Lote;
               AskAcumulado_Trava8 += Ask_Ativo2_Trava8;
               BidAcumulado_Trava8 += SymbolInfoDouble(Trava8_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava8_Ativo1, Trava8_Ativo2);
               FatorTrava8++;
               SpreadAcumuladoTrava8 += Bid_Ativo1_Trava8 - Ask_Ativo2_Trava8;
               UltimoSpreadTrava8 = SpreadAcumuladoTrava8/FatorTrava8;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA8: ",VolumeTrava8);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava8,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava8,2));

              }


            SpreadAtualTrava8 =  Ask_Ativo1_Trava8 - Bid_Ativo2_Trava8;
            LucroTrava8 = SpreadAberturaTrava8 - SpreadAtualTrava8;
            NormalizeDouble(Ask_Ativo1_Trava8,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava8,_Digits);
            NormalizeDouble(SpreadAtualTrava8,_Digits);
            NormalizeDouble(LucroTrava8,_Digits);
            CapturaMaiorDown(LucroTrava8);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava8 == 0) || (Bid_Ativo2_Trava8 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 8 OU NO ASK DO ATV 1 DA TRAVA 8 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava8  &&  LucroTrava8 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava8,Trava8_Ativo1,Ask_Ativo1_Trava8,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava8");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava8,Trava8_Ativo2,Bid_Ativo2_Trava8,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava8");
                 }
               IniciadoTrava8 = false;
               double BidMed = BidMedio(BidAcumulado_Trava8,FatorTrava8);
               double AskMed = AskMedio(AskAcumulado_Trava8,FatorTrava8);
               Print("======================================================================================================================== GAIN TRAVA 8");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava8 =0;
               VolumeTrava8 = 0;

               VerificaTrade(DiaAberturaTrava8);
               SpreadAcumuladoTrava8=0;
               DiaAberturaTrava8 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava8 = true;
               _Trava8 = aberto;
               Ch_Abertura_Trava8 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava8  &&  LucroTrava8 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava8);
               FecharTrava(VolumeTrava8,Trava8_Ativo1,Trava8_Ativo2,Bid_Ativo2_Trava8,Ask_Ativo1_Trava8);
               VolumeTrava8 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava8,FatorTrava8);
               double AskMed = AskMedio(AskAcumulado_Trava8,FatorTrava8);
               VerificaTrade(DiaAberturaTrava8);
               DiaAberturaTrava8 = 0;
               CountLoss++;
               IniciadoTrava8 = false;
               Print("======================================================================================================================== LOSS TRAVA 8");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava8 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava8=0;
               AbertoParaNegociacoesTrava8 = true;
               TRV_LossTrava8++;
               TravasAbertas+= -1;
               _Trava8 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava9_Ativo1, Trava9_Ativo2))
        {
         ChaveTrava9 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA9 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava9 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava9 = SymbolInfoDouble(Trava9_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava9 = SymbolInfoDouble(Trava9_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava9 = SymbolInfoDouble(Trava9_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava9 = SymbolInfoDouble(Trava9_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava9 = true;
         Handle_Trava9_Ativo1 = iMA(Trava9_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava9_Ativo2 = iMA(Trava9_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava9_Ativo1,QuantCandles, Array_Trava9_Ativo1);
         //------
         //--------
         SalvaAsks(Trava9_Ativo2,QuantCandles, Array_Trava9_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava9_Ativo2,0,1,QuantCandles,Array_Trava9_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava9 ATV 2 ##########");
            AbertoParaNegociacoesTrava9 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava9_Ativo1,0,0,1,Ultimo_Trava9_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava9 ATV 1 ##########");
            AbertoParaNegociacoesTrava9 = false;
           }
         if(!CopyBuffer(Handle_Trava9_Ativo2,0,0,1,Ultimo_Trava9_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava9 ATV 2 ##########");
            AbertoParaNegociacoesTrava9 = false;
           }

         AtualRatioTrava9 = SymbolInfoDouble(Trava9_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava9_Ativo2,SYMBOL_ASK);//9 = Ultimo_Trava9_A1[0] - Ultimo_Trava9_A2[0];
         MelhorRatioTrava9 = Calcular_Ratio(Array_Trava9_Ativo1, Array_Trava9_Ativo2);
         DiferencaTrava9 = (AtualRatioTrava9 - MelhorRatioTrava9)*100;
         NormalizeDouble(AtualRatioTrava9,_Digits);
         NormalizeDouble(MelhorRatioTrava9,_Digits);
         NormalizeDouble(DiferencaTrava9,_Digits);

         if(!IniciadoTrava9)//Se não aberta a posição nesses ativos
           {

            LucroTrava9 = 0;
            SpreadAtualTrava9 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava9 == 0) || (Bid_Ativo1_Trava9 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava9 OU NO ASK DO ATV 2 DA Trava9 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava9 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava9 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava9);
            if(Trava9 != DiferencaTrava9)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava9 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava9 && DiferencaTrava9 >= PercentualSinal && !IniciadoTrava9)
                 {
                  if(_Trava9 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava9 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava9 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava9*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava9*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava9,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 9 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava9,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava9,2));
                  DiaAberturaTrava9 = HoraAtual.day_of_year;
                  VolumeTrava9 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava9 += Ask_Ativo2_Trava9;
                  BidAcumulado_Trava9 += Bid_Ativo1_Trava9;
                  DiaFechamentoTrava9 = 0;
                  SpreadAcumuladoTrava9 += Bid_Ativo1_Trava9 - Ask_Ativo2_Trava9;
                  FatorTrava9++;
                  TRV_Trava9++;

                  if(Ch_Abertura_Trava9 == aberto)
                    {
                     AbrirPosicao(Trava9_Ativo1, Trava9_Ativo2);
                     Ch_Fechamento_Trava9  = aberto;
                     Ch_Abertura_Trava9 = fechado;
                    }


                  IniciadoTrava9 = true;
                 }
               Trava9 = DiferencaTrava9;
              }
            SpreadAberturaTrava9    = SpreadAcumuladoTrava9     /FatorTrava9   ; //SpreadAberturaTrava9 = Bid_Ativo1_Trava9 - Ask_Ativo2_Trava9;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava9 = SpreadAberturaTrava9 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava9 = Get_Ask(Trava9_Ativo1);
            //Bid_Ativo2_Trava9 = Get_Bid(Trava9_Ativo2);
            if(FatorTrava9  <= LimiteVol && (Bid_Ativo1_Trava9 - Ask_Ativo2_Trava9) >= 0.01 + UltimoSpreadTrava9)
              {
               UltimoSpreadTrava9 = (Bid_Ativo1_Trava9 - Ask_Ativo2_Trava9);
               SpreadAtualTrava9 =  Ask_Ativo1_Trava9 - Bid_Ativo2_Trava9;
               VolumeTrava9 += Lote;
               AskAcumulado_Trava9 += Ask_Ativo2_Trava9;
               BidAcumulado_Trava9 += SymbolInfoDouble(Trava9_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava9_Ativo1, Trava9_Ativo2);
               FatorTrava9++;
               SpreadAcumuladoTrava9 += Bid_Ativo1_Trava9 - Ask_Ativo2_Trava9;
               SpreadAberturaTrava9 = SpreadAcumuladoTrava9/FatorTrava9;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA9: ",VolumeTrava9);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava9,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava9,2));

              }


            SpreadAtualTrava9 =  Ask_Ativo1_Trava9 - Bid_Ativo2_Trava9;
            LucroTrava9 = SpreadAberturaTrava9 - SpreadAtualTrava9;
            NormalizeDouble(Ask_Ativo1_Trava9,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava9,_Digits);
            NormalizeDouble(SpreadAtualTrava9,_Digits);
            NormalizeDouble(LucroTrava9,_Digits);
            CapturaMaiorDown(LucroTrava9);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava9 == 0) || (Bid_Ativo2_Trava9 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 9 OU NO ASK DO ATV 1 DA TRAVA 9 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava9  &&  LucroTrava9 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava9,Trava9_Ativo1,Ask_Ativo1_Trava9,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava9");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava9,Trava9_Ativo2,Bid_Ativo2_Trava9,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava9");
                 }
               IniciadoTrava9 = false;
               double BidMed = BidMedio(BidAcumulado_Trava9,FatorTrava9);
               double AskMed = AskMedio(AskAcumulado_Trava9,FatorTrava9);
               Print("======================================================================================================================== GAIN TRAVA 9");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava9 =0;
               VolumeTrava9 = 0;

               VerificaTrade(DiaAberturaTrava9);
               SpreadAcumuladoTrava9=0;
               DiaAberturaTrava9 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava9 = true;
               _Trava9 = aberto;
               Ch_Abertura_Trava9 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava9  &&  LucroTrava9 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava9);
               FecharTrava(VolumeTrava9,Trava9_Ativo1,Trava9_Ativo2,Bid_Ativo2_Trava9,Ask_Ativo1_Trava9);
               VolumeTrava9 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava9,FatorTrava9);
               double AskMed = AskMedio(AskAcumulado_Trava9,FatorTrava9);
               VerificaTrade(DiaAberturaTrava9);
               DiaAberturaTrava9 = 0;
               CountLoss++;
               IniciadoTrava9 = false;
               Print("======================================================================================================================== LOSS TRAVA 9");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava9 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava9=0;
               AbertoParaNegociacoesTrava9 = true;
               TRV_LossTrava9++;
               TravasAbertas+= -1;
               _Trava9 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava10_Ativo1, Trava10_Ativo2))
        {
         ChaveTrava10 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA10 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava10 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava10 = SymbolInfoDouble(Trava10_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava10 = SymbolInfoDouble(Trava10_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava10 = SymbolInfoDouble(Trava10_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava10 = SymbolInfoDouble(Trava10_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava10 = true;
         Handle_Trava10_Ativo1 = iMA(Trava10_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava10_Ativo2 = iMA(Trava10_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava10_Ativo1,QuantCandles, Array_Trava10_Ativo1);
         //------
         //--------
         SalvaAsks(Trava10_Ativo2,QuantCandles, Array_Trava10_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava10_Ativo2,0,1,QuantCandles,Array_Trava10_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava10 ATV 2 ##########");
            AbertoParaNegociacoesTrava10 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava10_Ativo1,0,0,1,Ultimo_Trava10_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava10 ATV 1 ##########");
            AbertoParaNegociacoesTrava10 = false;
           }
         if(!CopyBuffer(Handle_Trava10_Ativo2,0,0,1,Ultimo_Trava10_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava10 ATV 2 ##########");
            AbertoParaNegociacoesTrava10 = false;
           }

         AtualRatioTrava10 = SymbolInfoDouble(Trava10_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava10_Ativo2,SYMBOL_ASK);//10 = Ultimo_Trava10_A1[0] - Ultimo_Trava10_A2[0];
         MelhorRatioTrava10 = Calcular_Ratio(Array_Trava10_Ativo1, Array_Trava10_Ativo2);
         DiferencaTrava10 = (AtualRatioTrava10 - MelhorRatioTrava10)*100;
         NormalizeDouble(AtualRatioTrava10,_Digits);
         NormalizeDouble(MelhorRatioTrava10,_Digits);
         NormalizeDouble(DiferencaTrava10,_Digits);

         if(!IniciadoTrava10)//Se não aberta a posição nesses ativos
           {

            LucroTrava10 = 0;
            SpreadAtualTrava10 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava10 == 0) || (Bid_Ativo1_Trava10 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava10 OU NO ASK DO ATV 2 DA Trava10 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava10 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava10 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava10);
            if(Trava10 != DiferencaTrava10)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava10 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava10 && DiferencaTrava10 >= PercentualSinal && !IniciadoTrava10)
                 {
                  if(_Trava10 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava10 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava10 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava10*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava10*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava10,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 10 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava10,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava10,2));
                  DiaAberturaTrava10 = HoraAtual.day_of_year;
                  VolumeTrava10 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava10 += Ask_Ativo2_Trava10;
                  BidAcumulado_Trava10 += Bid_Ativo1_Trava10;
                  DiaFechamentoTrava10 = 0;
                  SpreadAcumuladoTrava10 += Bid_Ativo1_Trava10 - Ask_Ativo2_Trava10;
                  FatorTrava10++;
                  TRV_Trava10++;

                  if(Ch_Abertura_Trava10 == aberto)
                    {
                     AbrirPosicao(Trava10_Ativo1, Trava10_Ativo2);
                     Ch_Fechamento_Trava10  = aberto;
                     Ch_Abertura_Trava10 = fechado;
                    }


                  IniciadoTrava10 = true;
                 }
               Trava10 = DiferencaTrava10;
              }
            SpreadAberturaTrava10    = SpreadAcumuladoTrava10     /FatorTrava10   ; //SpreadAberturaTrava10 = Bid_Ativo1_Trava10 - Ask_Ativo2_Trava10;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava10 = SpreadAberturaTrava10 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava10 = Get_Ask(Trava10_Ativo1);
            //Bid_Ativo2_Trava10 = Get_Bid(Trava10_Ativo2);
            if(FatorTrava10  <= LimiteVol && (Bid_Ativo1_Trava10 - Ask_Ativo2_Trava10) >= 0.01 + UltimoSpreadTrava10)
              {
               UltimoSpreadTrava10 = (Bid_Ativo1_Trava10 - Ask_Ativo2_Trava10);
               SpreadAtualTrava10 =  Ask_Ativo1_Trava10 - Bid_Ativo2_Trava10;
               VolumeTrava10 += Lote;
               AskAcumulado_Trava10 += Ask_Ativo2_Trava10;
               BidAcumulado_Trava10 += SymbolInfoDouble(Trava10_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava10_Ativo1, Trava10_Ativo2);
               FatorTrava10++;
               SpreadAcumuladoTrava10 += Bid_Ativo1_Trava10 - Ask_Ativo2_Trava10;
               SpreadAberturaTrava10 = SpreadAcumuladoTrava10/FatorTrava10;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA10: ",VolumeTrava10);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava10,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava10,2));

              }


            SpreadAtualTrava10 =  Ask_Ativo1_Trava10 - Bid_Ativo2_Trava10;
            LucroTrava10 = SpreadAberturaTrava10 - SpreadAtualTrava10;
            NormalizeDouble(Ask_Ativo1_Trava10,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava10,_Digits);
            NormalizeDouble(SpreadAtualTrava10,_Digits);
            NormalizeDouble(LucroTrava10,_Digits);
            CapturaMaiorDown(LucroTrava10);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava10 == 0) || (Bid_Ativo2_Trava10 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 10 OU NO ASK DO ATV 1 DA TRAVA 10 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava10  &&  LucroTrava10 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava10,Trava10_Ativo1,Ask_Ativo1_Trava10,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava10");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava10,Trava10_Ativo2,Bid_Ativo2_Trava10,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava10");
                 }
               IniciadoTrava10 = false;
               double BidMed = BidMedio(BidAcumulado_Trava10,FatorTrava10);
               double AskMed = AskMedio(AskAcumulado_Trava10,FatorTrava10);
               Print("======================================================================================================================== GAIN TRAVA 10");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava10 =0;
               VolumeTrava10 = 0;

               VerificaTrade(DiaAberturaTrava10);
               SpreadAcumuladoTrava10=0;
               DiaAberturaTrava10 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava10 = true;
               _Trava10 = aberto;
               Ch_Abertura_Trava1 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava10  &&  LucroTrava10 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava10);
               FecharTrava(VolumeTrava10,Trava10_Ativo1,Trava10_Ativo2,Bid_Ativo2_Trava10,Ask_Ativo1_Trava10);
               VolumeTrava10 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava10,FatorTrava10);
               double AskMed = AskMedio(AskAcumulado_Trava10,FatorTrava10);
               VerificaTrade(DiaAberturaTrava10);
               DiaAberturaTrava10 = 0;
               CountLoss++;
               IniciadoTrava10 = false;
               Print("======================================================================================================================== LOSS TRAVA 10");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava10 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava10=0;
               AbertoParaNegociacoesTrava10 = true;
               TRV_LossTrava10++;
               TravasAbertas+= -1;
               _Trava10 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }
      if(!TamanhoDoSpread(Trava11_Ativo1, Trava11_Ativo2))
        {
         ChaveTrava11 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA11 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava11 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava11 = SymbolInfoDouble(Trava11_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava11 = SymbolInfoDouble(Trava11_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava11 = SymbolInfoDouble(Trava11_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava11 = SymbolInfoDouble(Trava11_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava11 = true;
         Handle_Trava11_Ativo1 = iMA(Trava11_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava11_Ativo2 = iMA(Trava11_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava11_Ativo1,QuantCandles, Array_Trava11_Ativo1);
         //------
         //--------
         SalvaAsks(Trava11_Ativo2,QuantCandles, Array_Trava11_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava11_Ativo2,0,1,QuantCandles,Array_Trava11_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava11 ATV 2 ##########");
            AbertoParaNegociacoesTrava11 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava11_Ativo1,0,0,1,Ultimo_Trava11_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava11 ATV 1 ##########");
            AbertoParaNegociacoesTrava11 = false;
           }
         if(!CopyBuffer(Handle_Trava11_Ativo2,0,0,1,Ultimo_Trava11_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava11 ATV 2 ##########");
            AbertoParaNegociacoesTrava11 = false;
           }

         AtualRatioTrava11 = SymbolInfoDouble(Trava11_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava11_Ativo2,SYMBOL_ASK);//11 = Ultimo_Trava11_A1[0] - Ultimo_Trava11_A2[0];
         MelhorRatioTrava11 = Calcular_Ratio(Array_Trava11_Ativo1, Array_Trava11_Ativo2);
         DiferencaTrava11 = (AtualRatioTrava11 - MelhorRatioTrava11)*100;
         NormalizeDouble(AtualRatioTrava11,_Digits);
         NormalizeDouble(MelhorRatioTrava11,_Digits);
         NormalizeDouble(DiferencaTrava11,_Digits);

         if(!IniciadoTrava11)//Se não aberta a posição nesses ativos
           {

            LucroTrava11 = 0;
            SpreadAtualTrava11 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava11 == 0) || (Bid_Ativo1_Trava11 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava11 OU NO ASK DO ATV 2 DA Trava11 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava11 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava11 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava11);
            if(Trava11 != DiferencaTrava11)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava11 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava11 && DiferencaTrava11 >= PercentualSinal && !IniciadoTrava11)
                 {
                  if(_Trava11 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava11 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava11 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava11*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava11*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava11,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 11 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava11,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava11,2));
                  DiaAberturaTrava11 = HoraAtual.day_of_year;
                  VolumeTrava11 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava11 += Ask_Ativo2_Trava11;
                  BidAcumulado_Trava11 += Bid_Ativo1_Trava11;
                  DiaFechamentoTrava11 = 0;
                  SpreadAcumuladoTrava11 += Bid_Ativo1_Trava11 - Ask_Ativo2_Trava11;
                  FatorTrava11++;
                  TRV_Trava11++;

                  if(Ch_Abertura_Trava11 == aberto)
                    {
                     AbrirPosicao(Trava11_Ativo1, Trava11_Ativo2);
                     Ch_Fechamento_Trava11  = aberto;
                     Ch_Abertura_Trava11 = fechado;
                    }


                  IniciadoTrava11 = true;
                 }
               Trava11 = DiferencaTrava11;
              }
            SpreadAberturaTrava11    = SpreadAcumuladoTrava11     /FatorTrava11   ; //SpreadAberturaTrava11 = Bid_Ativo1_Trava11 - Ask_Ativo2_Trava11;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava11 = SpreadAberturaTrava11 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava11 = Get_Ask(Trava11_Ativo1);
            //Bid_Ativo2_Trava11 = Get_Bid(Trava11_Ativo2);
            if(FatorTrava11  <= LimiteVol && (Bid_Ativo1_Trava11 - Ask_Ativo2_Trava11) >= 0.01 + UltimoSpreadTrava11)
              {
               UltimoSpreadTrava11 = (Bid_Ativo1_Trava11 - Ask_Ativo2_Trava11);
               SpreadAtualTrava11 =  Ask_Ativo1_Trava11 - Bid_Ativo2_Trava11;
               VolumeTrava11 += Lote;
               AskAcumulado_Trava11 += Ask_Ativo2_Trava11;
               BidAcumulado_Trava11 += SymbolInfoDouble(Trava11_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava11_Ativo1, Trava11_Ativo2);
               FatorTrava11++;
               SpreadAcumuladoTrava11 += Bid_Ativo1_Trava11 - Ask_Ativo2_Trava11;
               SpreadAberturaTrava11 = SpreadAcumuladoTrava11/FatorTrava11;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA11: ",VolumeTrava11);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava11,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava11,2));

              }


            SpreadAtualTrava11 =  Ask_Ativo1_Trava11 - Bid_Ativo2_Trava11;
            LucroTrava11 = SpreadAberturaTrava11 - SpreadAtualTrava11;
            NormalizeDouble(Ask_Ativo1_Trava11,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava11,_Digits);
            NormalizeDouble(SpreadAtualTrava11,_Digits);
            NormalizeDouble(LucroTrava11,_Digits);
            CapturaMaiorDown(LucroTrava11);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava11 == 0) || (Bid_Ativo2_Trava11 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 11 OU NO ASK DO ATV 1 DA TRAVA 11 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava11  &&  LucroTrava11 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava11,Trava11_Ativo1,Ask_Ativo1_Trava11,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava11");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava11,Trava11_Ativo2,Bid_Ativo2_Trava11,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava11");
                 }
               IniciadoTrava11 = false;
               double BidMed = BidMedio(BidAcumulado_Trava11,FatorTrava11);
               double AskMed = AskMedio(AskAcumulado_Trava11,FatorTrava11);
               Print("======================================================================================================================== GAIN TRAVA 11");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava11 =0;
               VolumeTrava11 = 0;

               VerificaTrade(DiaAberturaTrava11);
               SpreadAcumuladoTrava11=0;
               DiaAberturaTrava11 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava11 = true;
               _Trava11 = aberto;
               Ch_Abertura_Trava11 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava11  &&  LucroTrava11 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava11);
               FecharTrava(VolumeTrava11,Trava11_Ativo1,Trava11_Ativo2,Bid_Ativo2_Trava11,Ask_Ativo1_Trava11);
               VolumeTrava11 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava11,FatorTrava11);
               double AskMed = AskMedio(AskAcumulado_Trava11,FatorTrava11);
               VerificaTrade(DiaAberturaTrava11);
               DiaAberturaTrava11 = 0;
               CountLoss++;
               IniciadoTrava11 = false;
               Print("======================================================================================================================== LOSS TRAVA 11");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava11 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava11=0;
               AbertoParaNegociacoesTrava11 = true;
               TRV_LossTrava11++;
               TravasAbertas+= -1;
               _Trava11 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava12_Ativo1, Trava12_Ativo2))
        {
         ChaveTrava12 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA12 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava12 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava12 = SymbolInfoDouble(Trava12_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava12 = SymbolInfoDouble(Trava12_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava12 = SymbolInfoDouble(Trava12_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava12 = SymbolInfoDouble(Trava12_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava12 = true;
         Handle_Trava12_Ativo1 = iMA(Trava12_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava12_Ativo2 = iMA(Trava12_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava12_Ativo1,QuantCandles, Array_Trava12_Ativo1);
         //------
         //--------
         SalvaAsks(Trava12_Ativo2,QuantCandles, Array_Trava12_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava12_Ativo2,0,1,QuantCandles,Array_Trava12_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava12 ATV 2 ##########");
            AbertoParaNegociacoesTrava12 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava12_Ativo1,0,0,1,Ultimo_Trava12_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava12 ATV 1 ##########");
            AbertoParaNegociacoesTrava12 = false;
           }
         if(!CopyBuffer(Handle_Trava12_Ativo2,0,0,1,Ultimo_Trava12_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava12 ATV 2 ##########");
            AbertoParaNegociacoesTrava12 = false;
           }

         AtualRatioTrava12 = SymbolInfoDouble(Trava12_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava12_Ativo2,SYMBOL_ASK);//12 = Ultimo_Trava12_A1[0] - Ultimo_Trava12_A2[0];
         MelhorRatioTrava12 = Calcular_Ratio(Array_Trava12_Ativo1, Array_Trava12_Ativo2);
         DiferencaTrava12 = (AtualRatioTrava12 - MelhorRatioTrava12)*100;
         NormalizeDouble(AtualRatioTrava12,_Digits);
         NormalizeDouble(MelhorRatioTrava12,_Digits);
         NormalizeDouble(DiferencaTrava12,_Digits);

         if(!IniciadoTrava12)//Se não aberta a posição nesses ativos
           {

            LucroTrava12 = 0;
            SpreadAtualTrava12 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava12 == 0) || (Bid_Ativo1_Trava12 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava12 OU NO ASK DO ATV 2 DA Trava12 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava12 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava12 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava12);
            if(Trava12 != DiferencaTrava12)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava12 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava12 && DiferencaTrava12 >= PercentualSinal && !IniciadoTrava12)
                 {
                  if(_Trava12 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava12 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava12 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava12*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava12*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava12,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 12 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava12,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava12,2));
                  DiaAberturaTrava12 = HoraAtual.day_of_year;
                  VolumeTrava12 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava12 += Ask_Ativo2_Trava12;
                  BidAcumulado_Trava12 += Bid_Ativo1_Trava12;
                  DiaFechamentoTrava12 = 0;
                  SpreadAcumuladoTrava12 += Bid_Ativo1_Trava12 - Ask_Ativo2_Trava12;
                  FatorTrava12++;
                  TRV_Trava12++;

                  if(Ch_Abertura_Trava12 == aberto)
                    {
                     AbrirPosicao(Trava12_Ativo1, Trava12_Ativo2);
                     Ch_Fechamento_Trava12  = aberto;
                     Ch_Abertura_Trava12 = fechado;
                    }


                  IniciadoTrava12 = true;
                 }
               Trava12 = DiferencaTrava12;
              }
            SpreadAberturaTrava12    = SpreadAcumuladoTrava12     /FatorTrava12   ; //SpreadAberturaTrava12 = Bid_Ativo1_Trava12 - Ask_Ativo2_Trava12;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava12 = SpreadAberturaTrava12 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava12 = Get_Ask(Trava12_Ativo1);
            //Bid_Ativo2_Trava12 = Get_Bid(Trava12_Ativo2);
            if(FatorTrava12  <= LimiteVol && (Bid_Ativo1_Trava12 - Ask_Ativo2_Trava12) >= 0.01 + UltimoSpreadTrava12)
              {
               UltimoSpreadTrava12 = (Bid_Ativo1_Trava12 - Ask_Ativo2_Trava12);
               SpreadAtualTrava12 =  Ask_Ativo1_Trava12 - Bid_Ativo2_Trava12;
               VolumeTrava12 += Lote;
               AskAcumulado_Trava12 += Ask_Ativo2_Trava12;
               BidAcumulado_Trava12 += SymbolInfoDouble(Trava12_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava12_Ativo1, Trava12_Ativo2);
               FatorTrava12++;
               SpreadAcumuladoTrava12 += Bid_Ativo1_Trava12 - Ask_Ativo2_Trava12;
               SpreadAberturaTrava12 = SpreadAcumuladoTrava12/FatorTrava12;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA12: ",VolumeTrava12);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava12,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava12,2));

              }


            SpreadAtualTrava12 =  Ask_Ativo1_Trava12 - Bid_Ativo2_Trava12;
            LucroTrava12 = SpreadAberturaTrava12 - SpreadAtualTrava12;
            NormalizeDouble(Ask_Ativo1_Trava12,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava12,_Digits);
            NormalizeDouble(SpreadAtualTrava12,_Digits);
            NormalizeDouble(LucroTrava12,_Digits);
            CapturaMaiorDown(LucroTrava12);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava12 == 0) || (Bid_Ativo2_Trava12 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 12 OU NO ASK DO ATV 1 DA TRAVA 12 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava12  &&  LucroTrava12 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava12,Trava12_Ativo1,Ask_Ativo1_Trava12,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava12");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava12,Trava12_Ativo2,Bid_Ativo2_Trava12,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava12");
                 }
               IniciadoTrava12 = false;
               double BidMed = BidMedio(BidAcumulado_Trava12,FatorTrava12);
               double AskMed = AskMedio(AskAcumulado_Trava12,FatorTrava12);
               Print("======================================================================================================================== GAIN TRAVA 12");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava12 =0;
               VolumeTrava12 = 0;

               VerificaTrade(DiaAberturaTrava12);
               SpreadAcumuladoTrava12=0;
               DiaAberturaTrava12 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava12 = true;
               _Trava12 = aberto;
               Ch_Abertura_Trava12 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava12  &&  LucroTrava12 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava12);
               FecharTrava(VolumeTrava12,Trava12_Ativo1,Trava12_Ativo2,Bid_Ativo2_Trava12,Ask_Ativo1_Trava12);
               VolumeTrava12 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava12,FatorTrava12);
               double AskMed = AskMedio(AskAcumulado_Trava12,FatorTrava12);
               VerificaTrade(DiaAberturaTrava12);
               DiaAberturaTrava12 = 0;
               CountLoss++;
               IniciadoTrava12 = false;
               Print("======================================================================================================================== LOSS TRAVA 12");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava12 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava12=0;
               AbertoParaNegociacoesTrava12 = true;
               TRV_LossTrava12++;
               TravasAbertas+= -1;
               _Trava12 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava13_Ativo1, Trava13_Ativo2))
        {
         ChaveTrava13 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA13 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava13 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava13 = SymbolInfoDouble(Trava13_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava13 = SymbolInfoDouble(Trava13_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava13 = SymbolInfoDouble(Trava13_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava13 = SymbolInfoDouble(Trava13_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava13 = true;
         Handle_Trava13_Ativo1 = iMA(Trava13_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava13_Ativo2 = iMA(Trava13_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava13_Ativo1,QuantCandles, Array_Trava13_Ativo1);
         //------
         //--------
         SalvaAsks(Trava13_Ativo2,QuantCandles, Array_Trava13_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava13_Ativo2,0,1,QuantCandles,Array_Trava13_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava13 ATV 2 ##########");
            AbertoParaNegociacoesTrava13 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava13_Ativo1,0,0,1,Ultimo_Trava13_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava13 ATV 1 ##########");
            AbertoParaNegociacoesTrava13 = false;
           }
         if(!CopyBuffer(Handle_Trava13_Ativo2,0,0,1,Ultimo_Trava13_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava13 ATV 2 ##########");
            AbertoParaNegociacoesTrava13 = false;
           }

         AtualRatioTrava13 = SymbolInfoDouble(Trava13_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava13_Ativo2,SYMBOL_ASK);//13 = Ultimo_Trava13_A1[0] - Ultimo_Trava13_A2[0];
         MelhorRatioTrava13 = Calcular_Ratio(Array_Trava13_Ativo1, Array_Trava13_Ativo2);
         DiferencaTrava13 = (AtualRatioTrava13 - MelhorRatioTrava13)*100;
         NormalizeDouble(AtualRatioTrava13,_Digits);
         NormalizeDouble(MelhorRatioTrava13,_Digits);
         NormalizeDouble(DiferencaTrava13,_Digits);

         if(!IniciadoTrava13)//Se não aberta a posição nesses ativos
           {

            LucroTrava13 = 0;
            SpreadAtualTrava13 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava13 == 0) || (Bid_Ativo1_Trava13 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava13 OU NO ASK DO ATV 2 DA Trava13 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava13 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava13 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava13);
            if(Trava13 != DiferencaTrava13)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava13 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava13 && DiferencaTrava13 >= PercentualSinal && !IniciadoTrava13)
                 {
                  if(_Trava13 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava13 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava13 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava13*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava13*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava13,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 13 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava13,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava13,2));
                  DiaAberturaTrava13 = HoraAtual.day_of_year;
                  VolumeTrava13 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava13 += Ask_Ativo2_Trava13;
                  BidAcumulado_Trava13 += Bid_Ativo1_Trava13;
                  DiaFechamentoTrava13 = 0;
                  SpreadAcumuladoTrava13 += Bid_Ativo1_Trava13 - Ask_Ativo2_Trava13;
                  FatorTrava13++;
                  TRV_Trava13++;

                  if(Ch_Abertura_Trava13 == aberto)
                    {
                     AbrirPosicao(Trava13_Ativo1, Trava13_Ativo2);
                     Ch_Fechamento_Trava13  = aberto;
                     Ch_Abertura_Trava13 = fechado;
                    }


                  IniciadoTrava13 = true;
                 }
               Trava13 = DiferencaTrava13;
              }
            SpreadAberturaTrava13    = SpreadAcumuladoTrava13     /FatorTrava13   ; //SpreadAberturaTrava13 = Bid_Ativo1_Trava13 - Ask_Ativo2_Trava13;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava13 = SpreadAberturaTrava13 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava13 = Get_Ask(Trava13_Ativo1);
            //Bid_Ativo2_Trava13 = Get_Bid(Trava13_Ativo2);
            if(FatorTrava13  <= LimiteVol && (Bid_Ativo1_Trava13 - Ask_Ativo2_Trava13) >= 0.01 + UltimoSpreadTrava13)
              {
               UltimoSpreadTrava13 = (Bid_Ativo1_Trava13 - Ask_Ativo2_Trava13);
               SpreadAtualTrava13 =  Ask_Ativo1_Trava13 - Bid_Ativo2_Trava13;
               VolumeTrava13 += Lote;
               AskAcumulado_Trava13 += Ask_Ativo2_Trava13;
               BidAcumulado_Trava13 += SymbolInfoDouble(Trava13_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava13_Ativo1, Trava13_Ativo2);
               FatorTrava13++;
               SpreadAcumuladoTrava13 += Bid_Ativo1_Trava13 - Ask_Ativo2_Trava13;
               SpreadAberturaTrava13 = SpreadAcumuladoTrava13/FatorTrava13;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA13: ",VolumeTrava13);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava13,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava13,2));

              }


            SpreadAtualTrava13 =  Ask_Ativo1_Trava13 - Bid_Ativo2_Trava13;
            LucroTrava13 = SpreadAberturaTrava13 - SpreadAtualTrava13;
            NormalizeDouble(Ask_Ativo1_Trava13,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava13,_Digits);
            NormalizeDouble(SpreadAtualTrava13,_Digits);
            NormalizeDouble(LucroTrava13,_Digits);
            CapturaMaiorDown(LucroTrava13);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava13 == 0) || (Bid_Ativo2_Trava13 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 13 OU NO ASK DO ATV 1 DA TRAVA 13 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava13  &&  LucroTrava13 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava13,Trava13_Ativo1,Ask_Ativo1_Trava13,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava13");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava13,Trava13_Ativo2,Bid_Ativo2_Trava13,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava13");
                 }
               IniciadoTrava13 = false;
               double BidMed = BidMedio(BidAcumulado_Trava13,FatorTrava13);
               double AskMed = AskMedio(AskAcumulado_Trava13,FatorTrava13);
               Print("======================================================================================================================== GAIN TRAVA 13");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava13 =0;
               VolumeTrava13 = 0;

               VerificaTrade(DiaAberturaTrava13);
               SpreadAcumuladoTrava13=0;
               DiaAberturaTrava13 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava13 = true;
               _Trava13 = aberto;
               Ch_Abertura_Trava13 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava13  &&  LucroTrava13 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava13);
               FecharTrava(VolumeTrava13,Trava13_Ativo1,Trava13_Ativo2,Bid_Ativo2_Trava13,Ask_Ativo1_Trava13);
               VolumeTrava13 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava13,FatorTrava13);
               double AskMed = AskMedio(AskAcumulado_Trava13,FatorTrava13);
               VerificaTrade(DiaAberturaTrava13);
               DiaAberturaTrava13 = 0;
               CountLoss++;
               IniciadoTrava13 = false;
               Print("======================================================================================================================== LOSS TRAVA 13");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava13 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava13=0;
               AbertoParaNegociacoesTrava13 = true;
               TRV_LossTrava13++;
               TravasAbertas+= -1;
               _Trava13 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava14_Ativo1, Trava14_Ativo2))
        {
         ChaveTrava14 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA14 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava14 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava14 = SymbolInfoDouble(Trava14_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava14 = SymbolInfoDouble(Trava14_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava14 = SymbolInfoDouble(Trava14_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava14 = SymbolInfoDouble(Trava14_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava14 = true;
         Handle_Trava14_Ativo1 = iMA(Trava14_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava14_Ativo2 = iMA(Trava14_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava14_Ativo1,QuantCandles, Array_Trava14_Ativo1);
         //------
         //--------
         SalvaAsks(Trava14_Ativo2,QuantCandles, Array_Trava14_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava14_Ativo2,0,1,QuantCandles,Array_Trava14_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava14 ATV 2 ##########");
            AbertoParaNegociacoesTrava14 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava14_Ativo1,0,0,1,Ultimo_Trava14_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava14 ATV 1 ##########");
            AbertoParaNegociacoesTrava14 = false;
           }
         if(!CopyBuffer(Handle_Trava14_Ativo2,0,0,1,Ultimo_Trava14_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava14 ATV 2 ##########");
            AbertoParaNegociacoesTrava14 = false;
           }

         AtualRatioTrava14 = SymbolInfoDouble(Trava14_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava14_Ativo2,SYMBOL_ASK);//14 = Ultimo_Trava14_A1[0] - Ultimo_Trava14_A2[0];
         MelhorRatioTrava14 = Calcular_Ratio(Array_Trava14_Ativo1, Array_Trava14_Ativo2);
         DiferencaTrava14 = (AtualRatioTrava14 - MelhorRatioTrava14)*100;
         NormalizeDouble(AtualRatioTrava14,_Digits);
         NormalizeDouble(MelhorRatioTrava14,_Digits);
         NormalizeDouble(DiferencaTrava14,_Digits);

         if(!IniciadoTrava14)//Se não aberta a posição nesses ativos
           {

            LucroTrava14 = 0;
            SpreadAtualTrava14 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava14 == 0) || (Bid_Ativo1_Trava14 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava14 OU NO ASK DO ATV 2 DA Trava14 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava14 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava14 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava14);
            if(Trava14 != DiferencaTrava14)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava14 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava14 && DiferencaTrava14 >= PercentualSinal && !IniciadoTrava14)
                 {
                  if(_Trava14 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava14 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava14 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava14*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava14*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava14,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 14 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava14,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava14,2));
                  DiaAberturaTrava14 = HoraAtual.day_of_year;
                  VolumeTrava14 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava14 += Ask_Ativo2_Trava14;
                  BidAcumulado_Trava14 += Bid_Ativo1_Trava14;
                  DiaFechamentoTrava14 = 0;
                  SpreadAcumuladoTrava14 += Bid_Ativo1_Trava14 - Ask_Ativo2_Trava14;
                  FatorTrava14++;
                  TRV_Trava14++;

                  if(Ch_Abertura_Trava14 == aberto)
                    {
                     AbrirPosicao(Trava14_Ativo1, Trava14_Ativo2);
                     Ch_Fechamento_Trava14  = aberto;
                     Ch_Abertura_Trava14 = fechado;
                    }


                  IniciadoTrava14 = true;
                 }
               Trava14 = DiferencaTrava14;
              }
            SpreadAberturaTrava14    = SpreadAcumuladoTrava14     /FatorTrava14   ; //SpreadAberturaTrava14 = Bid_Ativo1_Trava14 - Ask_Ativo2_Trava14;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava14 = SpreadAberturaTrava14 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava14 = Get_Ask(Trava14_Ativo1);
            //Bid_Ativo2_Trava14 = Get_Bid(Trava14_Ativo2);
            if(FatorTrava14  <= LimiteVol && (Bid_Ativo1_Trava14 - Ask_Ativo2_Trava14) >= 0.01 + UltimoSpreadTrava14)
              {
               UltimoSpreadTrava14 = (Bid_Ativo1_Trava14 - Ask_Ativo2_Trava14);
               SpreadAtualTrava14 =  Ask_Ativo1_Trava14 - Bid_Ativo2_Trava14;
               VolumeTrava14 += Lote;
               AskAcumulado_Trava14 += Ask_Ativo2_Trava14;
               BidAcumulado_Trava14 += SymbolInfoDouble(Trava14_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava14_Ativo1, Trava14_Ativo2);
               FatorTrava14++;
               SpreadAcumuladoTrava14 += Bid_Ativo1_Trava14 - Ask_Ativo2_Trava14;
               SpreadAberturaTrava14 = SpreadAcumuladoTrava14/FatorTrava14;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA14: ",VolumeTrava14);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava14,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava14,2));

              }


            SpreadAtualTrava14 =  Ask_Ativo1_Trava14 - Bid_Ativo2_Trava14;
            LucroTrava14 = SpreadAberturaTrava14 - SpreadAtualTrava14;
            NormalizeDouble(Ask_Ativo1_Trava14,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava14,_Digits);
            NormalizeDouble(SpreadAtualTrava14,_Digits);
            NormalizeDouble(LucroTrava14,_Digits);
            CapturaMaiorDown(LucroTrava14);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava14 == 0) || (Bid_Ativo2_Trava14 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 14 OU NO ASK DO ATV 1 DA TRAVA 14 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava14  &&  LucroTrava14 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava14,Trava14_Ativo1,Ask_Ativo1_Trava14,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava14");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava14,Trava14_Ativo2,Bid_Ativo2_Trava14,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava14");
                 }
               IniciadoTrava14 = false;
               double BidMed = BidMedio(BidAcumulado_Trava14,FatorTrava14);
               double AskMed = AskMedio(AskAcumulado_Trava14,FatorTrava14);
               Print("======================================================================================================================== GAIN TRAVA 14");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava14 =0;
               VolumeTrava14 = 0;

               VerificaTrade(DiaAberturaTrava14);
               SpreadAcumuladoTrava14=0;
               DiaAberturaTrava14 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava14 = true;
               _Trava14 = aberto;
               Ch_Abertura_Trava14 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava14  &&  LucroTrava14 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava14);
               FecharTrava(VolumeTrava14,Trava14_Ativo1,Trava14_Ativo2,Bid_Ativo2_Trava14,Ask_Ativo1_Trava14);
               VolumeTrava14 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava14,FatorTrava14);
               double AskMed = AskMedio(AskAcumulado_Trava14,FatorTrava14);
               VerificaTrade(DiaAberturaTrava14);
               DiaAberturaTrava14 = 0;
               CountLoss++;
               IniciadoTrava14 = false;
               Print("======================================================================================================================== LOSS TRAVA 14");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava14 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava14=0;
               AbertoParaNegociacoesTrava14 = true;
               TRV_LossTrava14++;
               TravasAbertas+= -1;
               _Trava14 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }
      if(!TamanhoDoSpread(Trava15_Ativo1, Trava15_Ativo2))
        {
         ChaveTrava15 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA15 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava15 == Ligada)  //Se PETR4 estiver em alta
        {
         double bid = Bid_Ativo1_Trava15 = SymbolInfoDouble(Trava15_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava15 = SymbolInfoDouble(Trava15_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava15 = SymbolInfoDouble(Trava15_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava15 = SymbolInfoDouble(Trava15_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava15 = true;
         Handle_Trava15_Ativo1 = iMA(Trava15_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava15_Ativo2 = iMA(Trava15_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava15_Ativo1,QuantCandles, Array_Trava15_Ativo1);
         //------
         //--------
         SalvaAsks(Trava15_Ativo2,QuantCandles, Array_Trava15_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava15_Ativo2,0,1,QuantCandles,Array_Trava15_Ativo2))
           {
            Print("########## ERRO BUFFER DA Trava15 ATV 2 ##########");
            AbertoParaNegociacoesTrava15 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava15_Ativo1,0,0,1,Ultimo_Trava15_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava15 ATV 1 ##########");
            AbertoParaNegociacoesTrava15 = false;
           }
         if(!CopyBuffer(Handle_Trava15_Ativo2,0,0,1,Ultimo_Trava15_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  Trava15 ATV 2 ##########");
            AbertoParaNegociacoesTrava15 = false;
           }

         AtualRatioTrava15 = SymbolInfoDouble(Trava15_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava15_Ativo2,SYMBOL_ASK);//15 = Ultimo_Trava15_A1[0] - Ultimo_Trava15_A2[0];
         MelhorRatioTrava15 = Calcular_Ratio(Array_Trava15_Ativo1, Array_Trava15_Ativo2);
         DiferencaTrava15 = (AtualRatioTrava15 - MelhorRatioTrava15)*100;
         NormalizeDouble(AtualRatioTrava15,_Digits);
         NormalizeDouble(MelhorRatioTrava15,_Digits);
         NormalizeDouble(DiferencaTrava15,_Digits);

         if(!IniciadoTrava15)//Se não aberta a posição nesses ativos
           {

            LucroTrava15 = 0;
            SpreadAtualTrava15 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava15 == 0) || (Bid_Ativo1_Trava15 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA Trava15 OU NO ASK DO ATV 2 DA Trava15 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava15 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava15 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava15);
            if(Trava15 != DiferencaTrava15)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava15 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava15 && DiferencaTrava15 >= PercentualSinal && !IniciadoTrava15)
                 {
                  if(_Trava15 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava15 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A Trava15 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava15*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava15*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava15,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 15 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava15,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava15,2));
                  DiaAberturaTrava15 = HoraAtual.day_of_year;
                  VolumeTrava15 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava15 += Ask_Ativo2_Trava15;
                  BidAcumulado_Trava15 += Bid_Ativo1_Trava15;
                  DiaFechamentoTrava15 = 0;
                  SpreadAcumuladoTrava15 += Bid_Ativo1_Trava15 - Ask_Ativo2_Trava15;
                  FatorTrava15++;
                  TRV_Trava15++;

                  if(Ch_Abertura_Trava15 == aberto)
                    {
                     AbrirPosicao(Trava15_Ativo1, Trava15_Ativo2);
                     Ch_Fechamento_Trava15  = aberto;
                     Ch_Abertura_Trava15 = fechado;
                    }


                  IniciadoTrava15 = true;
                 }
               Trava15 = DiferencaTrava15;
              }
            SpreadAberturaTrava15    = SpreadAcumuladoTrava15     /FatorTrava15   ; //SpreadAberturaTrava15 = Bid_Ativo1_Trava15 - Ask_Ativo2_Trava15;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava15 = SpreadAberturaTrava15 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava15 = Get_Ask(Trava15_Ativo1);
            //Bid_Ativo2_Trava15 = Get_Bid(Trava15_Ativo2);
            if(FatorTrava15  <= LimiteVol && (Bid_Ativo1_Trava15 - Ask_Ativo2_Trava15) >= 0.01 + UltimoSpreadTrava15)
              {
               UltimoSpreadTrava15 = (Bid_Ativo1_Trava15 - Ask_Ativo2_Trava15);
               SpreadAtualTrava15 =  Ask_Ativo1_Trava15 - Bid_Ativo2_Trava15;
               VolumeTrava15 += Lote;
               AskAcumulado_Trava15 += Ask_Ativo2_Trava15;
               BidAcumulado_Trava15 += SymbolInfoDouble(Trava15_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava15_Ativo1, Trava15_Ativo2);
               FatorTrava15++;
               SpreadAcumuladoTrava15 += Bid_Ativo1_Trava15 - Ask_Ativo2_Trava15;
               SpreadAberturaTrava15 = SpreadAcumuladoTrava15/FatorTrava15;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA15: ",VolumeTrava15);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava15,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava15,2));

              }


            SpreadAtualTrava15 =  Ask_Ativo1_Trava15 - Bid_Ativo2_Trava15;
            LucroTrava15 = SpreadAberturaTrava15 - SpreadAtualTrava15;
            NormalizeDouble(Ask_Ativo1_Trava15,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava15,_Digits);
            NormalizeDouble(SpreadAtualTrava15,_Digits);
            NormalizeDouble(LucroTrava15,_Digits);
            CapturaMaiorDown(LucroTrava15);
            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava15 == 0) || (Bid_Ativo2_Trava15 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 15 OU NO ASK DO ATV 1 DA TRAVA 15 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava15  &&  LucroTrava15 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava15,Trava15_Ativo1,Ask_Ativo1_Trava15,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA Trava15");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava15,Trava15_Ativo2,Bid_Ativo2_Trava15,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA Trava15");
                 }
               IniciadoTrava15 = false;
               double BidMed = BidMedio(BidAcumulado_Trava15,FatorTrava15);
               double AskMed = AskMedio(AskAcumulado_Trava15,FatorTrava15);
               Print("======================================================================================================================== GAIN TRAVA 15");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava15 =0;
               VolumeTrava15 = 0;

               VerificaTrade(DiaAberturaTrava15);
               SpreadAcumuladoTrava15=0;
               DiaAberturaTrava15 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava15 = true;
               _Trava15 = aberto;
               Ch_Abertura_Trava15 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava15  &&  LucroTrava15 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava15);
               FecharTrava(VolumeTrava15,Trava15_Ativo1,Trava15_Ativo2,Bid_Ativo2_Trava15,Ask_Ativo1_Trava15);
               VolumeTrava15 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava15,FatorTrava15);
               double AskMed = AskMedio(AskAcumulado_Trava15,FatorTrava15);
               VerificaTrade(DiaAberturaTrava15);
               DiaAberturaTrava15 = 0;
               CountLoss++;
               IniciadoTrava15 = false;
               Print("======================================================================================================================== LOSS TRAVA 15");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava15 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava15=0;
               AbertoParaNegociacoesTrava15 = true;
               TRV_LossTrava15++;
               TravasAbertas+= -1;
               _Trava15 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }
        }

      if(!TamanhoDoSpread(Trava16_Ativo1, Trava16_Ativo2))
        {
         ChaveTrava16 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA16 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava16 == Ligada)
        {
         double bid = Bid_Ativo1_Trava16 = SymbolInfoDouble(Trava16_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava16 = SymbolInfoDouble(Trava16_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava16 = SymbolInfoDouble(Trava16_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava16 = SymbolInfoDouble(Trava16_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava16 = true;
         Handle_Trava16_Ativo1 = iMA(Trava16_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava16_Ativo2 = iMA(Trava16_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava16_Ativo1,QuantCandles, Array_Trava16_Ativo1);
         //------
         //--------
         SalvaAsks(Trava16_Ativo2,QuantCandles, Array_Trava16_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava16_Ativo2,0,1,QuantCandles,Array_Trava16_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA16 ATV 2 ##########");
            AbertoParaNegociacoesTrava16 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava16_Ativo1,0,0,1,Ultimo_Trava16_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA16 ATV 1 ##########");
            AbertoParaNegociacoesTrava16 = false;
           }
         if(!CopyBuffer(Handle_Trava16_Ativo2,0,0,1,Ultimo_Trava16_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA16 ATV 2 ##########");
            AbertoParaNegociacoesTrava16 = false;
           }

         AtualRatioTrava16 = SymbolInfoDouble(Trava16_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava16_Ativo2,SYMBOL_ASK);//16 = Ultimo_Trava16_A1[0] - Ultimo_Trava16_A2[0];
         MelhorRatioTrava16 = Calcular_Ratio(Array_Trava16_Ativo1, Array_Trava16_Ativo2);
         DiferencaTrava16 = (AtualRatioTrava16 - MelhorRatioTrava16)*100;
         NormalizeDouble(AtualRatioTrava16,_Digits);
         NormalizeDouble(MelhorRatioTrava16,_Digits);
         NormalizeDouble(DiferencaTrava16,_Digits);

         if(!IniciadoTrava16)//Se não aberta a posição nesses ativos
           {

            LucroTrava16 = 0;
            SpreadAtualTrava16 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava16 == 0) || (Bid_Ativo1_Trava16 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava16 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava16 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava16);
            if(Trava16 != DiferencaTrava16)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava16 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava16 && DiferencaTrava16 >= PercentualSinal && !IniciadoTrava16)
                 {
                  if(_Trava16 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava16 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 16 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava16*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava16*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava16,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 16 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava16,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava16,2));
                  DiaAberturaTrava16 = HoraAtual.day_of_year;
                  VolumeTrava16 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava16 += Ask_Ativo2_Trava16;
                  BidAcumulado_Trava16 += Bid_Ativo1_Trava16;
                  DiaFechamentoTrava16 = 0;
                  SpreadAcumuladoTrava16 += Bid_Ativo1_Trava16 - Ask_Ativo2_Trava16;
                  FatorTrava16++;
                  TRV_Trava16++;

                  if(Ch_Abertura_Trava16 == aberto)
                    {
                     AbrirPosicao(Trava16_Ativo1, Trava16_Ativo2);
                     Ch_Fechamento_Trava16 = aberto;
                     Ch_Abertura_Trava16 = fechado;
                    }

                  IniciadoTrava16 = true;
                 }
               Trava16 = DiferencaTrava16;
              }
            SpreadAberturaTrava16    = SpreadAcumuladoTrava16     /FatorTrava16   ; //SpreadAberturaTrava16 = Bid_Ativo1_Trava16 - Ask_Ativo2_Trava16;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava16 = SpreadAberturaTrava16 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava16 = Get_Ask(Trava16_Ativo1);
            //Bid_Ativo2_Trava16 = Get_Bid(Trava16_Ativo2);
            if(FatorTrava16  <= LimiteVol && (Bid_Ativo1_Trava16 - Ask_Ativo2_Trava16) >= 0.01 + UltimoSpreadTrava16)
              {
               UltimoSpreadTrava16 = (Bid_Ativo1_Trava16 - Ask_Ativo2_Trava16);
               SpreadAtualTrava16 =  Ask_Ativo1_Trava16 - Bid_Ativo2_Trava16;
               VolumeTrava16 += Lote;
               AskAcumulado_Trava16 += Ask_Ativo2_Trava16;
               BidAcumulado_Trava16 += SymbolInfoDouble(Trava16_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava16_Ativo1, Trava16_Ativo2);
               FatorTrava16++;
               SpreadAcumuladoTrava16 += Bid_Ativo1_Trava16 - Ask_Ativo2_Trava16;
               SpreadAberturaTrava16 = SpreadAcumuladoTrava16/FatorTrava16;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA16: ",VolumeTrava16);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava16,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava16,2));

              }


            SpreadAtualTrava16 =  Ask_Ativo1_Trava16 - Bid_Ativo2_Trava16;
            LucroTrava16 = SpreadAberturaTrava16 - SpreadAtualTrava16;
            NormalizeDouble(Ask_Ativo1_Trava16,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava16,_Digits);
            NormalizeDouble(SpreadAtualTrava16,_Digits);
            NormalizeDouble(LucroTrava16,_Digits);
            CapturaMaiorDown(LucroTrava16);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava16 == 0) || (Bid_Ativo2_Trava16 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 16 OU NO ASK DO ATV 1 DA TRAVA 16 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava16  &&  LucroTrava16 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava16,Trava16_Ativo1,Ask_Ativo1_Trava16,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 16");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava16,Trava16_Ativo2,Bid_Ativo2_Trava16,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 16");
                 }
               IniciadoTrava16 = false;
               double BidMed = BidMedio(BidAcumulado_Trava16,FatorTrava16);
               double AskMed = AskMedio(AskAcumulado_Trava16,FatorTrava16);
               Print("======================================================================================================================== GAIN TRAVA 16");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava16 =0;

               VolumeTrava16 = 0;

               VerificaTrade(DiaAberturaTrava16);
               SpreadAcumuladoTrava16=0;
               DiaAberturaTrava16 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava16 = true;
               _Trava16 = aberto;
               Ch_Abertura_Trava16 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava16  &&  LucroTrava16 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava16);
               FecharTrava(VolumeTrava16,Trava16_Ativo1,Trava16_Ativo2,Bid_Ativo2_Trava16,Ask_Ativo1_Trava16);
               VolumeTrava16 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava16,FatorTrava16);
               double AskMed = AskMedio(AskAcumulado_Trava16,FatorTrava16);
               VerificaTrade(DiaAberturaTrava16);
               DiaAberturaTrava16 = 0;
               CountLoss++;
               IniciadoTrava16 = false;
               Print("======================================================================================================================== LOSS TRAVA 16");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava16 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava16=0;
               AbertoParaNegociacoesTrava16 = true;
               TRV_LossTrava16++;
               TravasAbertas+= -1;
               _Trava16 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }

      if(!TamanhoDoSpread(Trava17_Ativo1, Trava17_Ativo2))
        {
         ChaveTrava17 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA17 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava17 == Ligada)
        {
         double bid = Bid_Ativo1_Trava17 = SymbolInfoDouble(Trava17_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava17 = SymbolInfoDouble(Trava17_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava17 = SymbolInfoDouble(Trava17_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava17 = SymbolInfoDouble(Trava17_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava17 = true;
         Handle_Trava17_Ativo1 = iMA(Trava17_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava17_Ativo2 = iMA(Trava17_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava17_Ativo1,QuantCandles, Array_Trava17_Ativo1);
         //------
         //--------
         SalvaAsks(Trava17_Ativo2,QuantCandles, Array_Trava17_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava17_Ativo2,0,1,QuantCandles,Array_Trava17_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA17 ATV 2 ##########");
            AbertoParaNegociacoesTrava17 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava17_Ativo1,0,0,1,Ultimo_Trava17_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA17 ATV 1 ##########");
            AbertoParaNegociacoesTrava17 = false;
           }
         if(!CopyBuffer(Handle_Trava17_Ativo2,0,0,1,Ultimo_Trava17_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA17 ATV 2 ##########");
            AbertoParaNegociacoesTrava17 = false;
           }

         AtualRatioTrava17 = SymbolInfoDouble(Trava17_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava17_Ativo2,SYMBOL_ASK);//17 = Ultimo_Trava17_A1[0] - Ultimo_Trava17_A2[0];
         MelhorRatioTrava17 = Calcular_Ratio(Array_Trava17_Ativo1, Array_Trava17_Ativo2);
         DiferencaTrava17 = (AtualRatioTrava17 - MelhorRatioTrava17)*100;
         NormalizeDouble(AtualRatioTrava17,_Digits);
         NormalizeDouble(MelhorRatioTrava17,_Digits);
         NormalizeDouble(DiferencaTrava17,_Digits);

         if(!IniciadoTrava17)//Se não aberta a posição nesses ativos
           {

            LucroTrava17 = 0;
            SpreadAtualTrava17 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava17 == 0) || (Bid_Ativo1_Trava17 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava17 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava17 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava17);
            if(Trava17 != DiferencaTrava17)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava17 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava17 && DiferencaTrava17 >= PercentualSinal && !IniciadoTrava17)
                 {
                  if(_Trava17 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava17 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 17 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava17*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava17*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava17,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 17 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava17,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava17,2));
                  DiaAberturaTrava17 = HoraAtual.day_of_year;
                  VolumeTrava17 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava17 += Ask_Ativo2_Trava17;
                  BidAcumulado_Trava17 += Bid_Ativo1_Trava17;
                  DiaFechamentoTrava17 = 0;
                  SpreadAcumuladoTrava17 += Bid_Ativo1_Trava17 - Ask_Ativo2_Trava17;
                  FatorTrava17++;
                  TRV_Trava17++;

                  if(Ch_Abertura_Trava17 == aberto)
                    {
                     AbrirPosicao(Trava17_Ativo1, Trava17_Ativo2);
                     Ch_Fechamento_Trava17 = aberto;
                     Ch_Abertura_Trava17 = fechado;
                    }

                  IniciadoTrava17 = true;
                 }
               Trava17 = DiferencaTrava17;
              }
            SpreadAberturaTrava17    = SpreadAcumuladoTrava17     /FatorTrava17   ; //SpreadAberturaTrava17 = Bid_Ativo1_Trava17 - Ask_Ativo2_Trava17;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava17 = SpreadAberturaTrava17 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava17 = Get_Ask(Trava17_Ativo1);
            //Bid_Ativo2_Trava17 = Get_Bid(Trava17_Ativo2);
            if(FatorTrava17  <= LimiteVol && (Bid_Ativo1_Trava17 - Ask_Ativo2_Trava17) >= 0.01 + UltimoSpreadTrava17)
              {
               UltimoSpreadTrava17 = (Bid_Ativo1_Trava17 - Ask_Ativo2_Trava17);
               SpreadAtualTrava17 =  Ask_Ativo1_Trava17 - Bid_Ativo2_Trava17;
               VolumeTrava17 += Lote;
               AskAcumulado_Trava17 += Ask_Ativo2_Trava17;
               BidAcumulado_Trava17 += SymbolInfoDouble(Trava17_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava17_Ativo1, Trava17_Ativo2);
               FatorTrava17++;
               SpreadAcumuladoTrava17 += Bid_Ativo1_Trava17 - Ask_Ativo2_Trava17;
               SpreadAberturaTrava17 = SpreadAcumuladoTrava17/FatorTrava17;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA17: ",VolumeTrava17);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava17,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava17,2));

              }


            SpreadAtualTrava17 =  Ask_Ativo1_Trava17 - Bid_Ativo2_Trava17;
            LucroTrava17 = SpreadAberturaTrava17 - SpreadAtualTrava17;
            NormalizeDouble(Ask_Ativo1_Trava17,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava17,_Digits);
            NormalizeDouble(SpreadAtualTrava17,_Digits);
            NormalizeDouble(LucroTrava17,_Digits);
            CapturaMaiorDown(LucroTrava17);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava17 == 0) || (Bid_Ativo2_Trava17 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 17 OU NO ASK DO ATV 1 DA TRAVA 17 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava17  &&  LucroTrava17 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava17,Trava17_Ativo1,Ask_Ativo1_Trava17,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 17");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava17,Trava17_Ativo2,Bid_Ativo2_Trava17,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 17");
                 }
               IniciadoTrava17 = false;
               double BidMed = BidMedio(BidAcumulado_Trava17,FatorTrava17);
               double AskMed = AskMedio(AskAcumulado_Trava17,FatorTrava17);
               Print("======================================================================================================================== GAIN TRAVA 17");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava17 =0;

               VolumeTrava17 = 0;

               VerificaTrade(DiaAberturaTrava17);
               SpreadAcumuladoTrava17=0;
               DiaAberturaTrava17 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava17 = true;
               _Trava17 = aberto;
               Ch_Abertura_Trava17 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava17  &&  LucroTrava17 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava17);
               FecharTrava(VolumeTrava17,Trava17_Ativo1,Trava17_Ativo2,Bid_Ativo2_Trava17,Ask_Ativo1_Trava17);
               VolumeTrava17 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava17,FatorTrava17);
               double AskMed = AskMedio(AskAcumulado_Trava17,FatorTrava17);
               VerificaTrade(DiaAberturaTrava17);
               DiaAberturaTrava17 = 0;
               CountLoss++;
               IniciadoTrava17 = false;
               Print("======================================================================================================================== LOSS TRAVA 17");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava17 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava17=0;
               AbertoParaNegociacoesTrava17 = true;
               TRV_LossTrava17++;
               TravasAbertas+= -1;
               _Trava17 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }

      if(!TamanhoDoSpread(Trava18_Ativo1, Trava18_Ativo2))
        {
         ChaveTrava18 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA18 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava18 == Ligada)
        {
         double bid = Bid_Ativo1_Trava18 = SymbolInfoDouble(Trava18_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava18 = SymbolInfoDouble(Trava18_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava18 = SymbolInfoDouble(Trava18_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava18 = SymbolInfoDouble(Trava18_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava18 = true;
         Handle_Trava18_Ativo1 = iMA(Trava18_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava18_Ativo2 = iMA(Trava18_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava18_Ativo1,QuantCandles, Array_Trava18_Ativo1);
         //------
         //--------
         SalvaAsks(Trava18_Ativo2,QuantCandles, Array_Trava18_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava18_Ativo2,0,1,QuantCandles,Array_Trava18_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA18 ATV 2 ##########");
            AbertoParaNegociacoesTrava18 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava18_Ativo1,0,0,1,Ultimo_Trava18_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA18 ATV 1 ##########");
            AbertoParaNegociacoesTrava18 = false;
           }
         if(!CopyBuffer(Handle_Trava18_Ativo2,0,0,1,Ultimo_Trava18_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA18 ATV 2 ##########");
            AbertoParaNegociacoesTrava18 = false;
           }

         AtualRatioTrava18 = SymbolInfoDouble(Trava18_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava18_Ativo2,SYMBOL_ASK);//18 = Ultimo_Trava18_A1[0] - Ultimo_Trava18_A2[0];
         MelhorRatioTrava18 = Calcular_Ratio(Array_Trava18_Ativo1, Array_Trava18_Ativo2);
         DiferencaTrava18 = (AtualRatioTrava18 - MelhorRatioTrava18)*100;
         NormalizeDouble(AtualRatioTrava18,_Digits);
         NormalizeDouble(MelhorRatioTrava18,_Digits);
         NormalizeDouble(DiferencaTrava18,_Digits);

         if(!IniciadoTrava18)//Se não aberta a posição nesses ativos
           {

            LucroTrava18 = 0;
            SpreadAtualTrava18 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava18 == 0) || (Bid_Ativo1_Trava18 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava18 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava18 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava18);
            if(Trava18 != DiferencaTrava18)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava18 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava18 && DiferencaTrava18 >= PercentualSinal && !IniciadoTrava18)
                 {
                  if(_Trava18 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava18 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 18 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava18*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava18*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava18,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 18 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava18,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava18,2));
                  DiaAberturaTrava18 = HoraAtual.day_of_year;
                  VolumeTrava18 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava18 += Ask_Ativo2_Trava18;
                  BidAcumulado_Trava18 += Bid_Ativo1_Trava18;
                  DiaFechamentoTrava18 = 0;
                  SpreadAcumuladoTrava18 += Bid_Ativo1_Trava18 - Ask_Ativo2_Trava18;
                  FatorTrava18++;
                  TRV_Trava18++;

                  if(Ch_Abertura_Trava18 == aberto)
                    {
                     AbrirPosicao(Trava18_Ativo1, Trava18_Ativo2);
                     Ch_Fechamento_Trava18 = aberto;
                     Ch_Abertura_Trava18 = fechado;
                    }

                  IniciadoTrava18 = true;
                 }
               Trava18 = DiferencaTrava18;
              }
            SpreadAberturaTrava18    = SpreadAcumuladoTrava18     /FatorTrava18   ; //SpreadAberturaTrava18 = Bid_Ativo1_Trava18 - Ask_Ativo2_Trava18;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava18 = SpreadAberturaTrava18 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava18 = Get_Ask(Trava18_Ativo1);
            //Bid_Ativo2_Trava18 = Get_Bid(Trava18_Ativo2);
            if(FatorTrava18  <= LimiteVol && (Bid_Ativo1_Trava18 - Ask_Ativo2_Trava18) >= 0.01 + UltimoSpreadTrava18)
              {
               UltimoSpreadTrava18 = (Bid_Ativo1_Trava18 - Ask_Ativo2_Trava18);
               SpreadAtualTrava18 =  Ask_Ativo1_Trava18 - Bid_Ativo2_Trava18;
               VolumeTrava18 += Lote;
               AskAcumulado_Trava18 += Ask_Ativo2_Trava18;
               BidAcumulado_Trava18 += SymbolInfoDouble(Trava18_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava18_Ativo1, Trava18_Ativo2);
               FatorTrava18++;
               SpreadAcumuladoTrava18 += Bid_Ativo1_Trava18 - Ask_Ativo2_Trava18;
               SpreadAberturaTrava18 = SpreadAcumuladoTrava18/FatorTrava18;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA18: ",VolumeTrava18);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava18,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava18,2));

              }


            SpreadAtualTrava18 =  Ask_Ativo1_Trava18 - Bid_Ativo2_Trava18;
            LucroTrava18 = SpreadAberturaTrava18 - SpreadAtualTrava18;
            NormalizeDouble(Ask_Ativo1_Trava18,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava18,_Digits);
            NormalizeDouble(SpreadAtualTrava18,_Digits);
            NormalizeDouble(LucroTrava18,_Digits);
            CapturaMaiorDown(LucroTrava18);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava18 == 0) || (Bid_Ativo2_Trava18 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 18 OU NO ASK DO ATV 1 DA TRAVA 18 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava18  &&  LucroTrava18 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava18,Trava18_Ativo1,Ask_Ativo1_Trava18,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 18");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava18,Trava18_Ativo2,Bid_Ativo2_Trava18,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 18");
                 }
               IniciadoTrava18 = false;
               double BidMed = BidMedio(BidAcumulado_Trava18,FatorTrava18);
               double AskMed = AskMedio(AskAcumulado_Trava18,FatorTrava18);
               Print("======================================================================================================================== GAIN TRAVA 18");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava18 =0;

               VolumeTrava18 = 0;

               VerificaTrade(DiaAberturaTrava18);
               SpreadAcumuladoTrava18=0;
               DiaAberturaTrava18 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava18 = true;
               _Trava18 = aberto;
               Ch_Abertura_Trava18 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava18  &&  LucroTrava18 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava18);
               FecharTrava(VolumeTrava18,Trava18_Ativo1,Trava18_Ativo2,Bid_Ativo2_Trava18,Ask_Ativo1_Trava18);
               VolumeTrava18 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava18,FatorTrava18);
               double AskMed = AskMedio(AskAcumulado_Trava18,FatorTrava18);
               VerificaTrade(DiaAberturaTrava18);
               DiaAberturaTrava18 = 0;
               CountLoss++;
               IniciadoTrava18 = false;
               Print("======================================================================================================================== LOSS TRAVA 18");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava18 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava18=0;
               AbertoParaNegociacoesTrava18 = true;
               TRV_LossTrava18++;
               TravasAbertas+= -1;
               _Trava18 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }

      if(!TamanhoDoSpread(Trava19_Ativo1, Trava19_Ativo2))
        {
         ChaveTrava19 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA19 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava19 == Ligada)
        {
         double bid = Bid_Ativo1_Trava19 = SymbolInfoDouble(Trava19_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava19 = SymbolInfoDouble(Trava19_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava19 = SymbolInfoDouble(Trava19_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava19 = SymbolInfoDouble(Trava19_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava19 = true;
         Handle_Trava19_Ativo1 = iMA(Trava19_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava19_Ativo2 = iMA(Trava19_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava19_Ativo1,QuantCandles, Array_Trava19_Ativo1);
         //------
         //--------
         SalvaAsks(Trava19_Ativo2,QuantCandles, Array_Trava19_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava19_Ativo2,0,1,QuantCandles,Array_Trava19_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA19 ATV 2 ##########");
            AbertoParaNegociacoesTrava19 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava19_Ativo1,0,0,1,Ultimo_Trava19_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA19 ATV 1 ##########");
            AbertoParaNegociacoesTrava19 = false;
           }
         if(!CopyBuffer(Handle_Trava19_Ativo2,0,0,1,Ultimo_Trava19_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA19 ATV 2 ##########");
            AbertoParaNegociacoesTrava19 = false;
           }

         AtualRatioTrava19 = SymbolInfoDouble(Trava19_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava19_Ativo2,SYMBOL_ASK);//19 = Ultimo_Trava19_A1[0] - Ultimo_Trava19_A2[0];
         MelhorRatioTrava19 = Calcular_Ratio(Array_Trava19_Ativo1, Array_Trava19_Ativo2);
         DiferencaTrava19 = (AtualRatioTrava19 - MelhorRatioTrava19)*100;
         NormalizeDouble(AtualRatioTrava19,_Digits);
         NormalizeDouble(MelhorRatioTrava19,_Digits);
         NormalizeDouble(DiferencaTrava19,_Digits);

         if(!IniciadoTrava19)//Se não aberta a posição nesses ativos
           {

            LucroTrava19 = 0;
            SpreadAtualTrava19 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava19 == 0) || (Bid_Ativo1_Trava19 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava19 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava19 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava19);
            if(Trava19 != DiferencaTrava19)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava19 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava19 && DiferencaTrava19 >= PercentualSinal && !IniciadoTrava19)
                 {
                  if(_Trava19 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava19 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 19 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava19*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava19*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava19,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 19 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava19,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava19,2));
                  DiaAberturaTrava19 = HoraAtual.day_of_year;
                  VolumeTrava19 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava19 += Ask_Ativo2_Trava19;
                  BidAcumulado_Trava19 += Bid_Ativo1_Trava19;
                  DiaFechamentoTrava19 = 0;
                  SpreadAcumuladoTrava19 += Bid_Ativo1_Trava19 - Ask_Ativo2_Trava19;
                  FatorTrava19++;
                  TRV_Trava19++;

                  if(Ch_Abertura_Trava19 == aberto)
                    {
                     AbrirPosicao(Trava19_Ativo1, Trava19_Ativo2);
                     Ch_Fechamento_Trava19 = aberto;
                     Ch_Abertura_Trava19 = fechado;
                    }

                  IniciadoTrava19 = true;
                 }
               Trava19 = DiferencaTrava19;
              }
            SpreadAberturaTrava19    = SpreadAcumuladoTrava19     /FatorTrava19   ; //SpreadAberturaTrava19 = Bid_Ativo1_Trava19 - Ask_Ativo2_Trava19;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava19 = SpreadAberturaTrava19 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava19 = Get_Ask(Trava19_Ativo1);
            //Bid_Ativo2_Trava19 = Get_Bid(Trava19_Ativo2);
            if(FatorTrava19  <= LimiteVol && (Bid_Ativo1_Trava19 - Ask_Ativo2_Trava19) >= 0.01 + UltimoSpreadTrava19)
              {
               UltimoSpreadTrava19 = (Bid_Ativo1_Trava19 - Ask_Ativo2_Trava19);
               SpreadAtualTrava19 =  Ask_Ativo1_Trava19 - Bid_Ativo2_Trava19;
               VolumeTrava19 += Lote;
               AskAcumulado_Trava19 += Ask_Ativo2_Trava19;
               BidAcumulado_Trava19 += SymbolInfoDouble(Trava19_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava19_Ativo1, Trava19_Ativo2);
               FatorTrava19++;
               SpreadAcumuladoTrava19 += Bid_Ativo1_Trava19 - Ask_Ativo2_Trava19;
               SpreadAberturaTrava19 = SpreadAcumuladoTrava19/FatorTrava19;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA19: ",VolumeTrava19);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava19,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava19,2));

              }


            SpreadAtualTrava19 =  Ask_Ativo1_Trava19 - Bid_Ativo2_Trava19;
            LucroTrava19 = SpreadAberturaTrava19 - SpreadAtualTrava19;
            NormalizeDouble(Ask_Ativo1_Trava19,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava19,_Digits);
            NormalizeDouble(SpreadAtualTrava19,_Digits);
            NormalizeDouble(LucroTrava19,_Digits);
            CapturaMaiorDown(LucroTrava19);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava19 == 0) || (Bid_Ativo2_Trava19 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 19 OU NO ASK DO ATV 1 DA TRAVA 19 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava19  &&  LucroTrava19 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava19,Trava19_Ativo1,Ask_Ativo1_Trava19,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 19");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava19,Trava19_Ativo2,Bid_Ativo2_Trava19,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 19");
                 }
               IniciadoTrava19 = false;
               double BidMed = BidMedio(BidAcumulado_Trava19,FatorTrava19);
               double AskMed = AskMedio(AskAcumulado_Trava19,FatorTrava19);
               Print("======================================================================================================================== GAIN TRAVA 19");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava19 =0;

               VolumeTrava19 = 0;

               VerificaTrade(DiaAberturaTrava19);
               SpreadAcumuladoTrava19=0;
               DiaAberturaTrava19 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava19 = true;
               _Trava19 = aberto;
               Ch_Abertura_Trava19 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava19  &&  LucroTrava19 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava19);
               FecharTrava(VolumeTrava19,Trava19_Ativo1,Trava19_Ativo2,Bid_Ativo2_Trava19,Ask_Ativo1_Trava19);
               VolumeTrava19 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava19,FatorTrava19);
               double AskMed = AskMedio(AskAcumulado_Trava19,FatorTrava19);
               VerificaTrade(DiaAberturaTrava19);
               DiaAberturaTrava19 = 0;
               CountLoss++;
               IniciadoTrava19 = false;
               Print("======================================================================================================================== LOSS TRAVA 19");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava19 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava19=0;
               AbertoParaNegociacoesTrava19 = true;
               TRV_LossTrava19++;
               TravasAbertas+= -1;
               _Trava19 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }

      if(!TamanhoDoSpread(Trava20_Ativo1, Trava20_Ativo2))
        {
         ChaveTrava20 = Desligada;
        }
      //------------------------------------------------------------------------------------------
      //***************************************** TRAVA20 *****************************************
      //------------------------------------------------------------------------------------------
      if(ChaveTrava20 == Ligada)
        {
         double bid = Bid_Ativo1_Trava20 = SymbolInfoDouble(Trava20_Ativo1,SYMBOL_BID);
         double ask = Ask_Ativo1_Trava20 = SymbolInfoDouble(Trava20_Ativo1,SYMBOL_ASK);
         double bid2 = Bid_Ativo2_Trava20 = SymbolInfoDouble(Trava20_Ativo2,SYMBOL_BID);
         double ask2 = Ask_Ativo2_Trava20 = SymbolInfoDouble(Trava20_Ativo2,SYMBOL_ASK);
         AbertoParaNegociacoesTrava20 = true;
         Handle_Trava20_Ativo1 = iMA(Trava20_Ativo1,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);
         Handle_Trava20_Ativo2 = iMA(Trava20_Ativo2,PERIOD_CURRENT,1,0,MODE_SMA,PRICE_MEDIAN);

         //------
         SalvaBids(Trava20_Ativo1,QuantCandles, Array_Trava20_Ativo1);
         //------
         //--------
         SalvaAsks(Trava20_Ativo2,QuantCandles, Array_Trava20_Ativo2);
         //--------

         if(!CopyBuffer(Handle_Trava20_Ativo2,0,1,QuantCandles,Array_Trava20_Ativo2))
           {
            Print("########## ERRO BUFFER DA TRAVA20 ATV 2 ##########");
            AbertoParaNegociacoesTrava20 = false;
           }
         //Só do último preço (atual)
         if(!CopyBuffer(Handle_Trava20_Ativo1,0,0,1,Ultimo_Trava20_A1))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA20 ATV 1 ##########");
            AbertoParaNegociacoesTrava20 = false;
           }
         if(!CopyBuffer(Handle_Trava20_Ativo2,0,0,1,Ultimo_Trava20_A2))
           {
            Print("########## ERRO BUFFER DO ÚTIMO PREÇO DA  TRAVA20 ATV 2 ##########");
            AbertoParaNegociacoesTrava20 = false;
           }

         AtualRatioTrava20 = SymbolInfoDouble(Trava20_Ativo1,SYMBOL_BID) - SymbolInfoDouble(Trava20_Ativo2,SYMBOL_ASK);//20 = Ultimo_Trava20_A1[0] - Ultimo_Trava20_A2[0];
         MelhorRatioTrava20 = Calcular_Ratio(Array_Trava20_Ativo1, Array_Trava20_Ativo2);
         DiferencaTrava20 = (AtualRatioTrava20 - MelhorRatioTrava20)*100;
         NormalizeDouble(AtualRatioTrava20,_Digits);
         NormalizeDouble(MelhorRatioTrava20,_Digits);
         NormalizeDouble(DiferencaTrava20,_Digits);

         if(!IniciadoTrava20)//Se não aberta a posição nesses ativos
           {

            LucroTrava20 = 0;
            SpreadAtualTrava20 = 0;

            //Caso de não carregamento de preços para montar trava
            if((Ask_Ativo2_Trava20 == 0) || (Bid_Ativo1_Trava20 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 1 DA TRAVA 6 OU NO ASK DO ATV 2 DA TRAVA 6 necessários para montar a trava #######");
               AbertoParaNegociacoesTrava20 = false;
              }
            //SE NÃO ESTIVER ABERTO PARA NEGOCIAÇÕES, DESCONECTA O ROBÔ (DEVIDO A ERROS)
            if(AbertoParaNegociacoesTrava20 == false)
              {
               Print("Devido ao(s) erro(s) especificado(s), este robô está sendo desconectado");
               ExpertRemove();
               return;
              }
            //Print("Diferença de: ",DiferencaTrava20);
            if(Trava20 != DiferencaTrava20)
              {
               if(DentroDoHorarioRESTRITO() && SpreadBom_Trava20 && !ExcessoDeTravas && Alta && Tendencia_de_alta && AbertoParaNegociacoesTrava20 && DiferencaTrava20 >= PercentualSinal && !IniciadoTrava20)
                 {
                  if(_Trava20 == aberto)
                    {
                     TravasAbertas+=1;
                     _Trava20 = fechado;
                    }
                  if(!SendNotification(MsgAbertura))
                    {
                     Print("########################################################################## Erro no envio de notificação de abertura");
                    }
                  Print("------------------------------------------------------------- A TRAVA 20 ATENDEU O CRITÉRIO ATINGINDO UM RATEIO ACIMA DO MÁXIMO HISTÓRICO  ",HoraAtual.hour,":",HoraAtual.min,"h");
                  Print("-------------------------------------------------------------  Máximo histórico: ",DoubleToString(MelhorRatioTrava20*100,0),"  -  Rateio atual: ",DoubleToString(AtualRatioTrava20*100,0),"      Diferença ====> +",DoubleToString(DiferencaTrava20,0),"");
                  Print("------------------------------ -------------------- -------------------- ----------  NEGOCIAÇÃO INICIADA COM A TRAVA 20 --------------------");
                  Print("----------------------------------------------------------------------------------------  PREÇO DE VENDA DO ATV 1: R$", DoubleToString(Bid_Ativo1_Trava20,2),"   PREÇO DE COMPRA DO ATV 2: R$", DoubleToString(Ask_Ativo2_Trava20,2));
                  DiaAberturaTrava20 = HoraAtual.day_of_year;
                  VolumeTrava20 += Lote;//Registra o volume da posição para o correto fechamento (posteriormente)
                  AskAcumulado_Trava20 += Ask_Ativo2_Trava20;
                  BidAcumulado_Trava20 += Bid_Ativo1_Trava20;
                  DiaFechamentoTrava20 = 0;
                  SpreadAcumuladoTrava20 += Bid_Ativo1_Trava20 - Ask_Ativo2_Trava20;
                  FatorTrava20++;
                  TRV_Trava20++;

                  if(Ch_Abertura_Trava20 == aberto)
                    {
                     AbrirPosicao(Trava20_Ativo1, Trava20_Ativo2);
                     Ch_Fechamento_Trava20 = aberto;
                     Ch_Abertura_Trava20 = fechado;
                    }

                  IniciadoTrava20 = true;
                 }
               Trava20 = DiferencaTrava20;
              }
            SpreadAberturaTrava20    = SpreadAcumuladoTrava20     /FatorTrava20   ; //SpreadAberturaTrava20 = Bid_Ativo1_Trava20 - Ask_Ativo2_Trava20;//Capta o spread na hora de abertura da posição, depois fica estático
            UltimoSpreadTrava20 = SpreadAberturaTrava20 ;
           }
         else //Se iniciada a trava (Aberta posição de trava)
           {
            //Ask_Ativo1_Trava20 = Get_Ask(Trava20_Ativo1);
            //Bid_Ativo2_Trava20 = Get_Bid(Trava20_Ativo2);
            if(FatorTrava20  <= LimiteVol && (Bid_Ativo1_Trava20 - Ask_Ativo2_Trava20) >= 0.01 + UltimoSpreadTrava20)
              {
               UltimoSpreadTrava20 = (Bid_Ativo1_Trava20 - Ask_Ativo2_Trava20);
               SpreadAtualTrava20 =  Ask_Ativo1_Trava20 - Bid_Ativo2_Trava20;
               VolumeTrava20 += Lote;
               AskAcumulado_Trava20 += Ask_Ativo2_Trava20;
               BidAcumulado_Trava20 += SymbolInfoDouble(Trava20_Ativo1,SYMBOL_BID);
               AbrirPosicao(Trava20_Ativo1, Trava20_Ativo2);
               FatorTrava20++;
               SpreadAcumuladoTrava20 += Bid_Ativo1_Trava20 - Ask_Ativo2_Trava20;
               SpreadAberturaTrava20 = SpreadAcumuladoTrava20/FatorTrava20;
               Print("-----------------------------------------------------------------------------------------AUMENTO DE VOLUME NA TRAVA20: ",VolumeTrava20);
               Print("--------------------------------------------------------------------------------SPREAD DE ABERTURA: ",DoubleToString(SpreadAberturaTrava20,2),"     SPREAD ATUAL: ",DoubleToString(UltimoSpreadTrava20,2));

              }


            SpreadAtualTrava20 =  Ask_Ativo1_Trava20 - Bid_Ativo2_Trava20;
            LucroTrava20 = SpreadAberturaTrava20 - SpreadAtualTrava20;
            NormalizeDouble(Ask_Ativo1_Trava20,_Digits);
            NormalizeDouble(Bid_Ativo2_Trava20,_Digits);
            NormalizeDouble(SpreadAtualTrava20,_Digits);
            NormalizeDouble(LucroTrava20,_Digits);
            CapturaMaiorDown(LucroTrava20);

            //Caso de não carregamento de preços para desmontar trava
            if((Ask_Ativo1_Trava20 == 0) || (Bid_Ativo2_Trava20 == 0))
              {
               Print("####### ERRO NO CARREGAMENTO DO BID DO ATV 2 DA TRAVA 20 OU NO ASK DO ATV 1 DA TRAVA 20 necessários para desmontar a trava #######");
               // ExpertRemove();
               // return;
              }

            if(IniciadoTrava20  &&  LucroTrava20 >= Gain)
              {
               Sleep(500);
               if(!trade.Buy(VolumeTrava20,Trava20_Ativo1,Ask_Ativo1_Trava20,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE COMPRA NA DESMONTAGEM DA TRAVA 20");
                 }
               Sleep(500);
               if(!trade.Sell(VolumeTrava20,Trava20_Ativo2,Bid_Ativo2_Trava20,0,0,"Gain"))
                 {
                  Print("###ERRO NA ABERTURA DE ORDEM DE VENDA NA DESMONTAGEM DA TRAVA 20");
                 }
               IniciadoTrava20 = false;
               double BidMed = BidMedio(BidAcumulado_Trava20,FatorTrava20);
               double AskMed = AskMedio(AskAcumulado_Trava20,FatorTrava20);
               Print("======================================================================================================================== GAIN TRAVA 20");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava20 =0;

               VolumeTrava20 = 0;

               VerificaTrade(DiaAberturaTrava20);
               SpreadAcumuladoTrava20=0;
               DiaAberturaTrava20 = 0;
               CountProft++;
               TravasAbertas+= -1;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               AbertoParaNegociacoesTrava20 = true;
               _Trava20 = aberto;
               Ch_Abertura_Trava20 = aberto;
               if(!SendNotification(MsgDeFechamentoComGain))
                 {
                  Print("########################################################################## Erro no envio de notificação de Gain");
                 }
              }

            if(IniciadoTrava20  &&  LucroTrava20 <= (-1 * StopLoss))// Stop Loss
              {
               PerdaMaxima(LucroTrava20);
               FecharTrava(VolumeTrava20,Trava20_Ativo1,Trava20_Ativo2,Bid_Ativo2_Trava20,Ask_Ativo1_Trava20);
               VolumeTrava20 = 0;
               double BidMed = BidMedio(BidAcumulado_Trava20,FatorTrava20);
               double AskMed = AskMedio(AskAcumulado_Trava20,FatorTrava20);
               VerificaTrade(DiaAberturaTrava20);
               DiaAberturaTrava20 = 0;
               CountLoss++;
               IniciadoTrava20 = false;
               Print("======================================================================================================================== LOSS TRAVA 20");
               CalculaImprimeLucroDasTravas(ask,BidMed,AskMed,bid2);
               FatorTrava20 =0;
               Print("-------------------------------------------------------------------------------------------- Total de  ",CountProft," Gains e ",CountLoss," Loss");
               SpreadAcumuladoTrava20=0;
               AbertoParaNegociacoesTrava20 = true;
               TRV_LossTrava20++;
               TravasAbertas+= -1;
               _Trava20 = aberto;
               if(!SendNotification(MsgDeFechamentoComLoss))
                 {
                  Print("########################################################################## Erro no envio de notificação de Loss");
                 }
              }
           }

        }


      //-------------------------------------------------------------------------------------------------
      //Robô desliga por atingir a quantidade máxima de trades
      c = TRV_Trava1 + TRV_Trava2 + TRV_Trava3 + TRV_Trava4 + TRV_Trava5 + TRV_Trava6 + TRV_Trava7 + TRV_Trava8 + TRV_Trava9 + TRV_Trava10 + TRV_Trava11 + TRV_Trava12 + TRV_Trava13 + TRV_Trava14 + TRV_Trava15 + TRV_Trava16 + TRV_Trava17 + TRV_Trava18 + TRV_Trava19 + TRV_Trava20;
      if(c >= TotalDeTrades)
        {

        }

     }
   Balanco = AccountInfoDouble(ACCOUNT_BALANCE);
  }
//+------------------------------------------------------------------+



